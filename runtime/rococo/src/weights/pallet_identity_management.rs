// Copyright 2020-2023 Litentry Technologies GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_identity_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-18, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `parachain-benchmark`, CPU: `Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("rococo-dev"), DB CACHE: 20

// Executed Command:
// ./litentry-collator
// benchmark
// pallet
// --chain=rococo-dev
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet_identity_management
// --extrinsic=*
// --heap-pages=4096
// --steps=20
// --repeat=50
// --header=./LICENSE_HEADER
// --output=./runtime/rococo/src/weights/pallet_identity_management.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_identity_management`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity_management::WeightInfo for WeightInfo<T> {
	/// Storage: IdentityManagement Delegatee (r:0 w:1)
	/// Proof: IdentityManagement Delegatee (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn add_delegatee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_929 nanoseconds.
		Weight::from_ref_time(12_392_000)
			.saturating_add(Weight::from_proof_size(0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: IdentityManagement Delegatee (r:1 w:1)
	/// Proof: IdentityManagement Delegatee (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn remove_delegatee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `79`
		//  Estimated: `2523`
		// Minimum execution time: 19_177 nanoseconds.
		Weight::from_ref_time(19_692_000)
			.saturating_add(Weight::from_proof_size(2523))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	/// Proof Skipped: IMPExtrinsicWhitelist GroupControlOn (max_values: Some(1), max_size: None, mode: Measured)
	fn link_identity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `537`
		// Minimum execution time: 16_807 nanoseconds.
		Weight::from_ref_time(17_241_000)
			.saturating_add(Weight::from_proof_size(537))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	/// Proof Skipped: IMPExtrinsicWhitelist GroupControlOn (max_values: Some(1), max_size: None, mode: Measured)
	fn remove_identity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `537`
		// Minimum execution time: 15_454 nanoseconds.
		Weight::from_ref_time(16_174_000)
			.saturating_add(Weight::from_proof_size(537))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	/// Proof Skipped: IMPExtrinsicWhitelist GroupControlOn (max_values: Some(1), max_size: None, mode: Measured)
	fn set_user_shielding_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `537`
		// Minimum execution time: 15_552 nanoseconds.
		Weight::from_ref_time(16_366_000)
			.saturating_add(Weight::from_proof_size(537))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Teerex EnclaveIndex (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveIndex (max_values: None, max_size: None, mode: Measured)
	fn user_shielding_key_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `2730`
		// Minimum execution time: 19_728 nanoseconds.
		Weight::from_ref_time(20_311_000)
			.saturating_add(Weight::from_proof_size(2730))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Teerex EnclaveIndex (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveIndex (max_values: None, max_size: None, mode: Measured)
	fn identity_linked() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `2730`
		// Minimum execution time: 20_099 nanoseconds.
		Weight::from_ref_time(20_858_000)
			.saturating_add(Weight::from_proof_size(2730))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Teerex EnclaveIndex (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveIndex (max_values: None, max_size: None, mode: Measured)
	fn identity_removed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `2730`
		// Minimum execution time: 19_850 nanoseconds.
		Weight::from_ref_time(20_460_000)
			.saturating_add(Weight::from_proof_size(2730))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: Teerex EnclaveIndex (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveIndex (max_values: None, max_size: None, mode: Measured)
	fn some_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `2730`
		// Minimum execution time: 19_733 nanoseconds.
		Weight::from_ref_time(20_416_000)
			.saturating_add(Weight::from_proof_size(2730))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
