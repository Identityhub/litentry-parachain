// Copyright 2020-2023 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_teeracle`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-27, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `parachain-benchmark`, CPU: `Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("rococo-dev"), DB CACHE: 20

// Executed Command:
// ./litentry-collator
// benchmark
// pallet
// --chain=rococo-dev
// --execution=wasm
// --db-cache=20
// --wasm-execution=compiled
// --pallet=pallet_teeracle
// --extrinsic=*
// --heap-pages=4096
// --steps=20
// --repeat=50
// --header=./LICENSE_HEADER
// --output=./runtime/rococo/src/weights/pallet_teeracle.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_teeracle`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_teeracle::WeightInfo for WeightInfo<T> {
	/// Storage: Teerex EnclaveIndex (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teerex EnclaveRegistry (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teeracle Whitelists (r:1 w:0)
	/// Proof Skipped: Teeracle Whitelists (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teeracle ExchangeRates (r:1 w:1)
	/// Proof Skipped: Teeracle ExchangeRates (max_values: None, max_size: None, mode: Measured)
	fn update_exchange_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3465`
		//  Estimated: `23760`
		// Minimum execution time: 47_419 nanoseconds.
		Weight::from_parts(48_899_000, 0)
			.saturating_add(Weight::from_parts(0, 23760))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Teerex EnclaveIndex (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teerex EnclaveRegistry (r:1 w:0)
	/// Proof Skipped: Teerex EnclaveRegistry (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teeracle Whitelists (r:1 w:0)
	/// Proof Skipped: Teeracle Whitelists (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teeracle OracleData (r:0 w:1)
	/// Proof Skipped: Teeracle OracleData (max_values: None, max_size: None, mode: Measured)
	fn update_oracle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3456`
		//  Estimated: `21249`
		// Minimum execution time: 42_085 nanoseconds.
		Weight::from_parts(44_443_000, 0)
			.saturating_add(Weight::from_parts(0, 21249))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Teeracle Whitelists (r:1 w:1)
	/// Proof Skipped: Teeracle Whitelists (max_values: None, max_size: None, mode: Measured)
	fn add_to_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `2617`
		// Minimum execution time: 19_568 nanoseconds.
		Weight::from_parts(20_264_000, 0)
			.saturating_add(Weight::from_parts(0, 2617))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Teeracle Whitelists (r:1 w:1)
	/// Proof Skipped: Teeracle Whitelists (max_values: None, max_size: None, mode: Measured)
	fn remove_from_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `276`
		//  Estimated: `2751`
		// Minimum execution time: 21_612 nanoseconds.
		Weight::from_parts(22_265_000, 0)
			.saturating_add(Weight::from_parts(0, 2751))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
