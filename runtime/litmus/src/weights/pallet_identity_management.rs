// Copyright 2020-2023 Litentry Technologies GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_identity_management`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-16, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `LAPTOP-2LGRO8PK`, CPU: `AMD Ryzen 7 5800H with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("litmus-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/litentry-collator
// benchmark
// pallet
// --chain=litmus-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_identity_management
// --extrinsic=*
// --steps=20
// --repeat=50
// --header=./LICENSE_HEADER
// --output=./runtime/litmus/src/weights/pallet_identity_management.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_identity_management`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity_management::WeightInfo for WeightInfo<T> {
	// Storage: IdentityManagement Delegatee (r:0 w:1)
	fn add_delegatee() -> Weight {
		// Minimum execution time: 18_500 nanoseconds.
		Weight::from_ref_time(19_300_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: IdentityManagement Delegatee (r:1 w:1)
	fn remove_delegatee() -> Weight {
		// Minimum execution time: 22_400 nanoseconds.
		Weight::from_ref_time(22_900_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn create_identity() -> Weight {
		// Minimum execution time: 20_600 nanoseconds.
		Weight::from_ref_time(21_400_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn remove_identity() -> Weight {
		// Minimum execution time: 19_600 nanoseconds.
		Weight::from_ref_time(20_600_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn verify_identity() -> Weight {
		// Minimum execution time: 20_500 nanoseconds.
		Weight::from_ref_time(21_700_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn set_user_shielding_key() -> Weight {
		// Minimum execution time: 19_700 nanoseconds.
		Weight::from_ref_time(20_300_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn user_shielding_key_set() -> Weight {
		// Minimum execution time: 16_500 nanoseconds.
		Weight::from_ref_time(17_000_000)
	}
	fn identity_created() -> Weight {
		// Minimum execution time: 16_900 nanoseconds.
		Weight::from_ref_time(17_400_000)
	}
	fn identity_removed() -> Weight {
		// Minimum execution time: 17_300 nanoseconds.
		Weight::from_ref_time(17_900_000)
	}
	fn identity_verified() -> Weight {
		// Minimum execution time: 17_500 nanoseconds.
		Weight::from_ref_time(18_000_000)
	}
	fn some_error() -> Weight {
		// Minimum execution time: 16_200 nanoseconds.
		Weight::from_ref_time(17_600_000)
	}
}
