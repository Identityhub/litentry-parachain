name: Build & Test

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**/dependabot.yml'
      - '**/README.md'
  pull_request:
    branches:
      - dev
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-file-change:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Checks to see if any files in the PR/commit match one of the listed file types.
      # We can use this filter to decide whether or not to build docker images
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            src:
              - 'node/**'
              - 'pallets/**'
              - 'primitives/**'
              - 'runtime/**'
              - 'scripts/build-docker.sh'
              - 'docker/Dockerfile'
              - '**/Cargo.lock'
              - '**/Cargo.toml'
              - '**/rust-toolchain.toml'

  check-cargo-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
          target: wasm32-unknown-unknown
          default: true

      - name: Run cargo fmt check
        run: make fmtcheck

  check-cargo-clippy:
    runs-on: ubuntu-latest
    needs: [check-cargo-fmt, check-file-change]
    if: needs.check-file-change.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: clippy
          target: wasm32-unknown-unknown
          default: true

      - name: Run cargo clippy check
        run: make clippy

  build-docker:
    # run the docker build on our self-hosted runner, which takes < 20min without cache
    # on a standard github runner it takes ~1 hour
    runs-on: self-hosted
    needs: [check-cargo-fmt, check-file-change]
    steps:
      - name: Checkout codes
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1

      # To sync GHA cache seems to be very slow, as we are building locally,
      # simply use a local cache
      - name: Build docker image
        if: needs.check-file-change.outputs.src == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: litentry/litentry-parachain:latest
          outputs: type=docker,dest=litentry-parachain.tar
          push: false
          file: docker/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # - name: Build docker image
      #   if: needs.check-file-change.outputs.src == 'true'
      #   timeout-minutes: 40
      #   run: |
      #     ./scripts/build-docker.sh
      #     echo "============================="
      #     docker images

      - name: Pull docker image optinally
        if: needs.check-file-change.outputs.src == 'false'
        run: |
          docker pull litentry/litentry-parachain:latest

      - name: Save docker image
        run: |
          docker save litentry/litentry-parachain:latest -o litentry-parachain.tar

      - name: Upload docker image
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifact
          path: litentry-parachain.tar

      - name: Remove dangling docker images if any
        run: |
          [ -z "$(docker images --filter=dangling=true -q)" ] || docker rmi -f $(docker images --filter=dangling=true -q)

  run-ts-tests:
    runs-on: ubuntu-latest
    needs: build-docker
    strategy:
      matrix:
        chain:
          - litmus
          - litentry
    steps:
      - name: Checkout codes
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: docker-artifact

      - name: Load docker image
        run: |
          docker load -i litentry-parachain.tar

      - name: Run ts tests for ${{ matrix.chain }}
        timeout-minutes: 20
        run: |
          make test-ts-docker-${{ matrix.chain }}

      - name: Archive logs if test fails
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: ${{ matrix.chain }}-ts-tests-artifacts
          path: /tmp/parachain_dev/
          retention-days: 3

      - name: Clean up for ${{ matrix.chain }}
        if: ${{ always() }}
        run: |
          make clean-docker-${{ matrix.chain }}

  run-cargo-unit-tests:
    runs-on: ubuntu-latest
    needs: [check-cargo-fmt, check-file-change]
    if: needs.check-file-change.outputs.src == 'true'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: wasm32-unknown-unknown
          default: true

      - name: Run unittests
        run: cargo test --release -p pallet-* --lib

  run-cargo-runtime-tests:
    runs-on: ubuntu-latest
    needs: [check-cargo-fmt, check-file-change]
    if: needs.check-file-change.outputs.src == 'true'
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 10G
      SCCACHE_DIR: /home/runner/.cache/sccache
      CARGO_INCREMENTAL: 0
    strategy:
      matrix:
        chain:
          - litmus
          - litentry
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: wasm32-unknown-unknown
          default: true

      # use sccache to accelerate binary compilation
      # see https://www.infinyon.com/blog/2021/04/github-actions-best-practices/
      - name: Install sccache
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: v0.2.15
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          chmod +x $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-

      - name: Cache sccache
        uses: actions/cache@v2
        continue-on-error: false
        with:
          path: /home/runner/.cache/sccache
          key: sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-

      - name: Run runtime integration tests
        run: cargo test --release -p ${{ matrix.chain }}-parachain-runtime --lib

      - name: Print sccache stats
        run: sccache --show-stats

  push-docker-image:
    runs-on: ubuntu-latest
    needs: ["check-cargo-clippy", "run-cargo-unit-tests", "run-cargo-runtime-tests", "run-ts-tests"]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: docker-artifact

      - name: Load docker image
        run: |
          docker load -i litentry-parachain.tar

      - name: Dockerhub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push docker image on dev branch if test passes
        if: ${{ success() && (github.event_name == 'push') && (github.ref == 'refs/heads/dev') }}
        run:
          docker push litentry/litentry-parachain:latest
