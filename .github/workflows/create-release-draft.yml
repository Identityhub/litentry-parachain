name: Create release draft

on:
  workflow_dispatch:
    inputs:
      release_client:
        type: boolean
        description: client
        required: true
        default: true
      release_runtime:
        type: boolean
        description: runtime
        required: true
        default: true
      release_enclave:
        type: boolean
        description: enclave
        required: true
        default: true
      release_tag:
        description: an existing tag for creating release (e.g. v1.2.3)
        required: true
      diff_tag:
        description: an existing tag to run diff against (e.g. v1.2.0)
        default: ""
        required: false
      genesis_release:
        type: choice
        description: If any of the genesis artefacts should be released alongside
        options:
          - none
          - litmus
          - rococo
          - litentry

env:
  RELEASE_TAG: ${{ github.event.inputs.release_tag }}
  DIFF_TAG: ${{ github.event.inputs.diff_tag }}
  GENESIS_RELEASE: ${{ github.event.inputs.genesis_release }}
  DOCKER_BUILDKIT: 1

jobs:
  set-release-type:
    runs-on: ubuntu-latest
    steps:
      - name: set release_type
        id: vars
        run: |
          release_type=""
          if [ "${{ github.event.inputs.release_enclave }}" = "true" ] && [ "${{ github.event.inputs.release_client }}" = "true" ] && [ "${{ github.event.inputs.release_runtime }}" = "true" ]; then
            release_type="all"
          elif [ "${{ github.event.inputs.release_client }}" = "true" ] && [ "${{ github.event.inputs.release_runtime }}" = "true" ]; then
            release_type="both"
          elif [ "${{ github.event.inputs.release_client }}" = "true" ]; then
            release_type="client"
          elif [ "${{ github.event.inputs.release_runtime }}" = "true" ]; then
            release_type="runtime"
          elif [ "${{ github.event.inputs.release_enclave }}" = "true" ]; then
            release_type="enclave"
          else
            echo "::error::Please select at least one release type."
            exit 1
          fi
          echo "release_type=${release_type}" >> $GITHUB_OUTPUT
    outputs:
      release_type: ${{ steps.vars.outputs.release_type }}

  ## build runtime wasm ##
  build-wasm:
    if: ${{ github.event.inputs.release_runtime == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chain:
          - litmus
          - rococo
          - litentry
    steps:
      - name: Checkout codes on ${{ env.RELEASE_TAG }}
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_TAG }}
          fetch-depth: 0

      - name: Build with srtool
        id: srtool_build
        uses: chevdor/srtool-actions@v0.7.0
        env:
          # optional: will override the parachain pallet ID and authorize_upgrade call ID,
          #           which will result in a different parachain_authorize_upgrade_hash
          PARACHAIN_PALLET_ID: "0x1e"
          AUTHORIZE_UPGRADE_PREFIX: "0x02"
        with:
          chain: ${{ matrix.chain }}-parachain
          runtime_dir: runtime/${{ matrix.chain }}
          tag: "1.66.0"

      - name: Summary
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq . > ${{ matrix.chain }}-parachain-srtool-digest.json
          echo "==============================================="
          cat ${{ matrix.chain }}-parachain-srtool-digest.json
          cp ${{ steps.srtool_build.outputs.wasm_compressed }} ${{ matrix.chain }}-parachain-runtime.compact.compressed.wasm

      - name: Upload wasm artefacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.chain }}-parachain-runtime
          path: |
            ${{ matrix.chain }}-parachain-srtool-digest.json
            ${{ matrix.chain }}-parachain-runtime.compact.compressed.wasm

  ## build docker image of client binary ##
  build-docker:
    if: ${{ github.event.inputs.release_client == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codes on ${{ env.RELEASE_TAG }}
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_TAG }}
          fetch-depth: 0

      - name: Build docker image
        run: |
          ./scripts/build-docker.sh production ${{ env.RELEASE_TAG }}
          echo "============================="
          docker images

      - name: Dockerhub login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push docker image
        run: |
          docker push litentry/litentry-parachain:${{ env.RELEASE_TAG }}

      - name: Generate genesis artefacts if need
        if: github.event.inputs.genesis_release != 'none'
        run: |
          docker run --rm litentry/litentry-parachain:${{ env.RELEASE_TAG }} export-genesis-state --chain=${{ env.GENESIS_RELEASE }} > ${{ env.GENESIS_RELEASE }}-genesis-state
          docker run --rm litentry/litentry-parachain:${{ env.RELEASE_TAG }} export-genesis-wasm --chain=${{ env.GENESIS_RELEASE }} > ${{ env.GENESIS_RELEASE }}-genesis-wasm

      - name: Copy client binary to disk
        run: |
          docker cp $(docker create --rm litentry/litentry-parachain:${{ env.RELEASE_TAG }}):/usr/local/bin/litentry-collator .

      - name: Upload the client binary
        uses: actions/upload-artifact@v3
        with:
          name: litentry-collator
          if-no-files-found: ignore
          path: |
            litentry-collator
            ${{ env.GENESIS_RELEASE }}-genesis-state
            ${{ env.GENESIS_RELEASE }}-genesis-wasm

  ## Build the enclave and package config files
  build-enclave:
    runs-on: prod-tee-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.manual_trigger }}

      - name: Generate Package
        run: | 
          source /opt/intel/sgxsdk/environment 
          ./tee-worker/scripts/litentry/release/generate_release_pkg.sh
          
      - name: Archive Package
        uses: actions/upload-artifact@v2
        with:
          name: tee-worker-${{ env.RELEASE_TAG }}.tar.gz
          path: ./tee-worker/target/*.tar.gz

      - name: Set MRENCLAVE
        id: mrenclave
        run: |
          cd tee-worker 
          echo "mrenclave=$(make mrenclave)" >> $GITHUB_OUTPUT

      - name: Set RUSTC version
        id: rustc
        run: |
          RUSTC_VERSION=$(rustc --version | cut -d' ' -f2)
          echo "rustc_version=$RUSTC_VERSION" >> $GITHUB_OUTPUT

    outputs:
      mrenclave: ${{ steps.mrenclave.outputs.mrenclave }}
      rustc_version: ${{ steps.rustc.outputs.rustc_version }}
  ## test again the built docker image ##

  ## check extrinsic ##
  extrinsic-ordering-check-from-bin:
    runs-on: ubuntu-latest
    needs: build-docker
    strategy:
      matrix:
        chain: [rococo, litmus, litentry]
        include:
          - chain: rococo
            ref_url: wss://rpc.rococo-parachain-sg.litentry.io
          - chain: litmus
            ref_url: wss://rpc.litmus-parachain.litentry.io
          - chain: litentry
            ref_url: wss://rpc.litentry-parachain.litentry.io
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_TAG }}
      - name: Prepare output and compare the metadata
        timeout-minutes: 3
        run: |
          RELEASE_TAG=${{ env.RELEASE_TAG }}
          PARACHAIN_NAME=local-parachain
          BASE_URL=ws://127.0.0.1:9944
          chain=${{ matrix.chain }}
          REF_URL=${{ matrix.ref_url }}
          echo "Metadata comparison:" > output-$chain.txt
          echo "Date: $(date)" >> output-$chain.txt
          echo "Base: $BASE_URL" >> output-$chain.txt
          echo "Reference: $REF_URL" >> output-$chain.txt
          echo "Target Tag: $RELEASE_TAG" >> output-$chain.txt
          echo "Chain: $chain" >> output-$chain.txt
          echo "----------------------------------------------------------------------" >> output-$chain.txt
          echo "Running parachain: $chain"
          docker run --pull always --rm --name=$PARACHAIN_NAME -d -p 9944:9944 litentry/litentry-parachain:$RELEASE_TAG --chain=$chain-dev --rpc-cors=all --ws-external --tmp -- --dev
          sleep 3
          CMD="docker run --pull always --network host jacogr/polkadot-js-tools metadata $REF_URL $BASE_URL"
          echo -e "Running:\n$CMD"
          docker run --pull always --rm --network host jacogr/polkadot-js-tools metadata $REF_URL $BASE_URL | tee -a output-$chain.txt
          SUMMARY=$(./scripts/extrinsic-ordering-filter.sh output-$chain.txt)
          echo -e $SUMMARY >> output-$chain.txt
          docker stop $PARACHAIN_NAME
          content=$(< output-$chain.txt)
          echo "content<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  ## create the release draft ##
  create-release-draft:
    runs-on: ubuntu-latest
    # see https://github.com/actions/runner/issues/491
    # seems to be the only way to achieve this
    needs:
      - set-release-type
      - build-enclave
    steps:
      - name: Checkout codes on ${{ env.RELEASE_TAG }}
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_TAG }}
          fetch-depth: 0

      - name: Download all artefacts
        uses: actions/download-artifact@v3
      
      - name: Download tee-worker artifact
        uses: actions/download-artifact@v3
        with:
          name: tee-worker-1892-release-3.tar.gz
          path: ${{ github.workspace }}

      - name: Generate release notes
        run: |
          export RUSTC_VERSION=${{ needs.build-enclave.outputs.rustc_version }}
          export MRENCLAVE_OUTPUT="${{ needs.build-enclave.outputs.mrenclave }}"
          ./scripts/generate-release-notes.sh ${{ github.workspace }}/.github/release_notes.md ${{ needs.set-release-type.outputs.release_type }} ${{ env.DIFF_TAG }}
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Create release draft
        id: create-release-draft
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Litentry-parachain ${{ env.RELEASE_TAG }}
          body_path: ${{ github.workspace }}/.github/release_notes.md
          draft: true
          files: |
            *-parachain-runtime/*-parachain-srtool-digest.json
            *-parachain-runtime/*-parachain-runtime.compact.compressed.wasm
            litentry-collator/*
            tee-worker-${{ env.RELEASE_TAG }}.tar.gz
