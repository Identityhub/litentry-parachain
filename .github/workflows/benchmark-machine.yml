name: Benchmark machine

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: The tag of docker image to pull
        default: 'latest'
        required: true

env:
  INSTANCE_ID: ${{ secrets.BENCHMARK_INSTANCE_ID }}
  INSTANCE_GROUP: ${{ secrets.BENCHMARK_INSTANCE_GROUP }}
  INSTANCE_HOST: ${{ secrets.BENCHMARK_INSTANCE_HOST }}
  BENCHMARK_SSH_USER: ${{ secrets.BENCHMARK_SSH_USER }}
  BENCHMARK_SSH_KEYPATH: ${{ secrets.BENCHMARK_SSH_KEYPATH }}

jobs:
  ## run the benchmarking remotely
  benchmark-machine:
    runs-on: jumphost.azure
    steps:
      - name: Checkout codes on ${{ github.ref }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # TODO: maybe use GHA to start/stop remote instance
      - name: Start remote instance
        timeout-minutes: 10
        id: start_instance
        run: |
          az vm start --resource-group ${{ env.INSTANCE_GROUP }} --name ${{ env.INSTANCE_ID }}
          sleep 5
          instance_status="az vm get-instance-view --resource-group ${{ env.INSTANCE_GROUP }} --name ${{ env.INSTANCE_ID }} --query instanceView.statuses[1].displayStatus"
          system_status="az vm get-instance-view --resource-group ${{ env.INSTANCE_GROUP }} --name ${{ env.INSTANCE_ID }} --query instanceView.statuses[1].code"
          SECONDS=0
          while : ; do
            if [ "$(eval $instance_status)" = "VM running" ] && [ "$(eval $system_status)" = "PowerState/running" ]; then
              break
            else
              sleep 20
              SECONDS=$((SECONDS + 20))
            fi
          done
          echo "Remote instance reachable now after $SECONDS seconds"

      # exit status should propagate through ssh
      - name: Remotely benchmark machine
        timeout-minutes: 10
        run: |
          echo "Running instances ip address: ${{ env.INSTANCE_HOST }}"
          ssh -x -o StrictHostKeychecking=no "${{ env.INSTANCE_HOST }}" -l ${{ env.BENCHMARK_SSH_USER }} -i ${{ env.BENCHMARK_SSH_KEYPATH }} \
            docker pull litentry/litentry-parachain:${{ github.event.inputs.docker_tag }} && \
            docker run --rm litentry/litentry-parachain:${{ github.event.inputs.docker_tag }} benchmark machine --allow-fail --chain=litmus-dev

      - name: Stop remote instance
        if: always()
        run: |
          az vm stop --resource-group ${{ env.INSTANCE_GROUP }} --name ${{ env.INSTANCE_ID }}
          sleep 5
          ret=`az vm get-instance-view --resource-group ${{ env.INSTANCE_GROUP }} --name ${{ env.INSTANCE_ID }} --query instanceView.statuses[1].displayStatus`
          echo "Remote instance running state: $ret"
