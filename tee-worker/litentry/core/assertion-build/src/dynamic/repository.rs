#[cfg(all(feature = "std", feature = "sgx"))]
compile_error!("feature \"std\" and feature \"sgx\" cannot be enabled at the same time");

#[cfg(all(not(feature = "std"), feature = "sgx"))]
extern crate sgx_tstd as std;

#[cfg(all(not(feature = "std"), feature = "sgx"))]
extern crate hex_sgx as hex;

use primitive_types::H160;
use std::collections::HashMap;
use std::vec::Vec;

pub trait SmartContractRepository {

    fn get(&self, id: &H160) -> Option<Vec<u8>>;

}

pub struct InMemorySmartContractRepo {
    map: HashMap<H160, Vec<u8>>
}

impl InMemorySmartContractRepo {

    pub fn new() -> Self {
        let mut map = HashMap::new();
        map.insert(
            hash(0),
            hex::decode("608060405234801561001057600080fd5b5061077f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806309c5eabe1461003b578063c66e70f014610067575b600080fd5b61004e6100493660046103cd565b61008a565b60405161005e9493929190610466565b60405180910390f35b61007a6100753660046104c8565b6100c1565b604051901515815260200161005e565b6060806060600080858060200190518101906100a69190610548565b90506100b1816100e6565b9450945094509450509193509193565b6000816000015163ffffffff16600414156100de57506001919050565b506000919050565b60608060606000806040518060800160405280604581526020016106ce60459139905060006040518060400160405280601b81526020017f4261736963204964656e7469747920566572696669636174696f6e00000000008152509050600060405180606001604052806037815260200161071360379139905060008080805b8b518110156101dd576101918c82815181106101845761018461068e565b60200260200101516101fc565b1561019f57600191506101cb565b6101c18c82815181106101b4576101b461068e565b602002602001015161022b565b156101cb57600192505b806101d5816106a4565b915050610166565b508080156101e85750815b959b949a5092985093965091945050505050565b600061020782610254565b8061021657506102168261026b565b80610225575061022582610288565b92915050565b6000610236826102a5565b806102455750610245826100c1565b806102255750610225826102c2565b805160009063ffffffff166100de57506001919050565b6000816000015163ffffffff16600114156100de57506001919050565b6000816000015163ffffffff16600214156100de57506001919050565b6000816000015163ffffffff16600314156100de57506001919050565b6000816000015163ffffffff16600514156100de57506001919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610318576103186102df565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610347576103476102df565b604052919050565b600067ffffffffffffffff821115610369576103696102df565b50601f01601f191660200190565b600082601f83011261038857600080fd5b813561039b6103968261034f565b61031e565b8181528460208386010111156103b057600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156103df57600080fd5b813567ffffffffffffffff8111156103f657600080fd5b61040284828501610377565b949350505050565b60005b8381101561042557818101518382015260200161040d565b83811115610434576000848401525b50505050565b6000815180845261045281602086016020860161040a565b601f01601f19169290920160200192915050565b608081526000610479608083018761043a565b828103602084015261048b818761043a565b9050828103604084015261049f818661043a565b915050821515606083015295945050505050565b63ffffffff811681146104c557600080fd5b50565b6000602082840312156104da57600080fd5b813567ffffffffffffffff808211156104f257600080fd5b908301906040828603121561050657600080fd5b61050e6102f5565b8235610519816104b3565b815260208301358281111561052d57600080fd5b61053987828601610377565b60208301525095945050505050565b6000602080838503121561055b57600080fd5b825167ffffffffffffffff8082111561057357600080fd5b818501915085601f83011261058757600080fd5b815181811115610599576105996102df565b8060051b6105a885820161031e565b91825283810185019185810190898411156105c257600080fd5b86860192505b83831015610681578251858111156105e05760008081fd5b86016040818c03601f19018113156105f85760008081fd5b6106006102f5565b8983015161060d816104b3565b815282820151888111156106215760008081fd5b8084019350508c603f8401126106375760008081fd5b898301516106476103968261034f565b8181528e8483870101111561065c5760008081fd5b61066b828d830186880161040a565b828c0152508452505091860191908601906105c8565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156106c657634e487b7160e01b600052601160045260246000fd5b506001019056fe596f75277665206964656e746966696564206174206c65617374206f6e65206163636f756e742f6164647265737320696e20626f7468205765623220616e6420576562332e246861735f776562325f6163636f756e74203d3d207472756520616e6420246861735f776562335f6163636f756e74203d3d2074727565a26469706673582212208271aba6061226250b47b78fd11d6561b035772536a30a99688373d21cf3a9c464736f6c63430008080033").unwrap()
        );
        map.insert(
            hash(1),
            hex::decode("608060405234801561001057600080fd5b50610708806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806309c5eabe1461003b578063c66e70f014610067575b600080fd5b61004e610049366004610310565b61008a565b60405161005e94939291906103a9565b60405180910390f35b61007a61007536600461040b565b6100c1565b604051901515815260200161005e565b6060806060600080858060200190518101906100a6919061048b565b90506100b1816100e6565b9450945094509450509193509193565b6000816000015163ffffffff16600414156100de57506001919050565b506000919050565b60608060606000806040518060c001604052806086815260200161064d60869139604080518082018252601c81527f49444875622045564d2056657273696f6e204561726c79204269726400000000602080830191909152825180840184526013815272246861735f6a6f696e6564203d3d207472756560681b818301528351808501909452600a8452691a185cd7da9bda5b995960b21b918401919091529293509190600090815b8a518110156101e05760006040518060800160405280605281526020016105fb6052913990506101bf81846101f1565b935083156101cd57506101e0565b50806101d8816105d1565b91505061018f565b509399929850909650945092505050565b60405160009081908385016020828288866002600019f161021157600080fd5b506020810160405251949350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561025b5761025b610222565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561028a5761028a610222565b604052919050565b600067ffffffffffffffff8211156102ac576102ac610222565b50601f01601f191660200190565b600082601f8301126102cb57600080fd5b81356102de6102d982610292565b610261565b8181528460208386010111156102f357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561032257600080fd5b813567ffffffffffffffff81111561033957600080fd5b610345848285016102ba565b949350505050565b60005b83811015610368578181015183820152602001610350565b83811115610377576000848401525b50505050565b6000815180845261039581602086016020860161034d565b601f01601f19169290920160200192915050565b6080815260006103bc608083018761037d565b82810360208401526103ce818761037d565b905082810360408401526103e2818661037d565b915050821515606083015295945050505050565b63ffffffff8116811461040857600080fd5b50565b60006020828403121561041d57600080fd5b813567ffffffffffffffff8082111561043557600080fd5b908301906040828603121561044957600080fd5b610451610238565b823561045c816103f6565b815260208301358281111561047057600080fd5b61047c878286016102ba565b60208301525095945050505050565b6000602080838503121561049e57600080fd5b825167ffffffffffffffff808211156104b657600080fd5b818501915085601f8301126104ca57600080fd5b8151818111156104dc576104dc610222565b8060051b6104eb858201610261565b918252838101850191858101908984111561050557600080fd5b86860192505b838310156105c4578251858111156105235760008081fd5b86016040818c03601f190181131561053b5760008081fd5b610543610238565b89830151610550816103f6565b815282820151888111156105645760008081fd5b8084019350508c603f84011261057a5760008081fd5b8983015161058a6102d982610292565b8181528e8483870101111561059f5760008081fd5b6105ae828d830186880161034d565b828c01525084525050918601919086019061050b565b9998505050505050505050565b60006000198214156105f357634e487b7160e01b600052601160045260246000fd5b506001019056fe68747470733a2f2f617263686976652d746573742e6c6974656e7472792e696f2f6576656e74732f646f65732d757365722d6a6f696e65642d65766d2d63616d706169676e3f6163636f756e743d74657374546865207573657220697320616e206561726c7920626972642075736572206f6620746865204964656e746974794875622045564d2076657273696f6e20616e64206861732067656e657261746564206174206c6561737420312063726564656e7469616c20647572696e672032303233204175672031347468207e2041756720323173742ea2646970667358221220a37c7662e848cdf6c78c7dc5d78d590cbe13e39b665a68c74e6934e1e93d4a5164736f6c63430008080033").unwrap()
        );
        InMemorySmartContractRepo {
            map
        }
    }
}

impl SmartContractRepository for InMemorySmartContractRepo {
    fn get(&self, id: &H160) -> Option<Vec<u8>> {
        self.map.get(id)
            .map(|code| code.clone())
    }
}

fn hash(a: u64) -> H160 {
    H160::from_low_u64_be(a)
}
