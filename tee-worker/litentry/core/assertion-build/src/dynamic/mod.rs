// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

use crate::{dynamic::repository::SmartContractByteCode, *};
use itp_types::Assertion;
use lc_credentials::{assertion_logic::AssertionLogic, Credential, IssuerRuntimeVersion};
use lc_dynamic_assertion::{AssertionExecutor, AssertionLogicRepository};
use lc_evm_dynamic_assertions::EvmAssertionExecutor;
use lc_stf_task_sender::AssertionBuildRequest;
use log::error;
use primitive_types::H160;

pub mod repository;

pub fn build<
	SC: AssertionLogicRepository<Id = H160, Item = (SmartContractByteCode, Vec<String>)>,
>(
	req: &AssertionBuildRequest,
	smart_contract_id: SC::Id,
	repository: Arc<SC>,
) -> Result<Credential> {
	let executor = EvmAssertionExecutor { assertion_repository: repository };
	let result = executor.execute(smart_contract_id, &req.identities).map_err(|e| {
		Error::RequestVCFailed(
			Assertion::Dynamic(smart_contract_id),
			ErrorDetail::StfError(ErrorString::truncate_from(e.into())),
		)
	})?;

	let runtime_version = IssuerRuntimeVersion {
		parachain: req.parachain_runtime_version,
		sidechain: req.sidechain_runtime_version,
	};

	match Credential::new(&req.who, &req.shard, &runtime_version) {
		Ok(mut credential_unsigned) => {
			let mut assertion_values: Vec<AssertionLogic> = vec![];
			for assertion in result.assertions {
				let logic: AssertionLogic = serde_json::from_str(&assertion).map_err(|e| {
					Error::RequestVCFailed(
						Assertion::Dynamic(smart_contract_id),
						ErrorDetail::StfError(ErrorString::truncate_from(format!("{}", e).into())),
					)
				})?;
				assertion_values.push(logic);
			}

			credential_unsigned.update_dynamic(
				result.description,
				result.assertion_type,
				assertion_values,
				result.schema_url,
				result.meet,
			);
			Ok(credential_unsigned)
		},
		Err(e) => {
			error!("Generate unsigned credential failed {:?}", e);
			Err(Error::RequestVCFailed(
				Assertion::Dynamic(smart_contract_id),
				e.into_error_detail(),
			))
		},
	}
}

#[cfg(test)]
pub mod dynamic_assertion_test {
	use ethabi::{encode, Token};
	use lc_evm_dynamic_assertions::{execute_smart_contract, prepare_function_call_input};
	use lc_mock_server::run;
	use primitive_types::U256;

	// ToHex.sol bytecode
	const TO_HEX_BYTE_CODE: &str = "608060405234801561001057600080fd5b50610817806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638876183c1461003b578063e256184614610065575b600080fd5b61004e6100493660046103c9565b610089565b60405161005c929190610453565b60405180910390f35b61007861007336600461053b565b61009f565b60405161005c9594939291906106e9565b6000606061009683610278565b91509150915091565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156101cf57838290600052602060002001805461014290610793565b80601f016020809104026020016040519081016040528092919081815260200182805461016e90610793565b80156101bb5780601f10610190576101008083540402835291602001916101bb565b820191906000526020600020905b81548152906001019060200180831161019e57829003601f168201915b505050505081526020019060010190610123565b5050505092508180546101e190610793565b80601f016020809104026020016040519081016040528092919081815260200182805461020d90610793565b801561025a5780601f1061022f5761010080835404028352916020019161025a565b820191906000526020600020905b81548152906001019060200180831161023d57829003601f168201915b50505050509150975097509750975097505050509295509295909350565b6000606060008360405160200161028f91906107ce565b60408051601f1981840301815290829052805190925090611000818360208601600061041b600019f16102c157600080fd5b8094506040810193506110008101604052505050915091565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610313576103136102da565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610342576103426102da565b604052919050565b600067ffffffffffffffff831115610364576103646102da565b610377601f8401601f1916602001610319565b905082815283838301111561038b57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126103b357600080fd5b6103c28383356020850161034a565b9392505050565b6000602082840312156103db57600080fd5b813567ffffffffffffffff8111156103f257600080fd5b6103fe848285016103a2565b949350505050565b6000815180845260005b8181101561042c57602081850181015186830182015201610410565b8181111561043e576000602083870101525b50601f01601f19169290920160200192915050565b82151581526040602082015260006103fe6040830184610406565b600067ffffffffffffffff821115610488576104886102da565b5060051b60200190565b803563ffffffff811681146104a657600080fd5b919050565b600082601f8301126104bc57600080fd5b813560206104d16104cc8361046e565b610319565b82815260059290921b840181019181810190868411156104f057600080fd5b8286015b8481101561053057803567ffffffffffffffff8111156105145760008081fd5b6105228986838b01016103a2565b8452509183019183016104f4565b509695505050505050565b6000806040838503121561054e57600080fd5b823567ffffffffffffffff8082111561056657600080fd5b818501915085601f83011261057a57600080fd5b8135602061058a6104cc8361046e565b82815260059290921b840181019181810190898411156105a957600080fd5b8286015b848110156106bb578035868111156105c457600080fd5b87016060818d03601f190112156105da57600080fd5b6105e26102f0565b6105ed868301610492565b815260408201358881111561060157600080fd5b8201603f81018e1361061257600080fd5b6106238e888301356040840161034a565b878301525060608201358881111561063a57600080fd5b8083019250508c603f83011261064f57600080fd5b8582013561065f6104cc8261046e565b81815260059190911b830160400190878101908f83111561067f57600080fd5b6040850194505b828510156106a65761069785610492565b82529388019390880190610686565b604084015250508452509183019183016105ad565b50965050860135925050808211156106d257600080fd5b506106df858286016104ab565b9150509250929050565b60a0815260006106fc60a0830188610406565b60208382038185015261070f8289610406565b915083820360408501528187518084528284019150828160051b850101838a0160005b8381101561076057601f1987840301855261074e838351610406565b94860194925090850190600101610732565b50508681036060880152610774818a610406565b95505050505050610789608083018415159052565b9695505050505050565b600181811c908216806107a757607f821691505b602082108114156107c857634e487b7160e01b600052602260045260246000fd5b50919050565b6020815260006103c2602083018461040656fea26469706673582212202bc48bafd887e8c048a6dd3bfe6528691288f0a4158ec3c7f543773204e9991564736f6c634300080b0033";

	// ConcatenateStrings.sol bytecode
	const CONCATENATE_STRINGS_BYTE_CODE: &str = "608060405234801561001057600080fd5b5061081a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e25618461461003b578063f2baa36e14610068575b600080fd5b61004e610049366004610458565b610088565b60405161005f959493929190610663565b60405180910390f35b61007b61007636600461070d565b610261565b60405161005f9190610767565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156101b857838290600052602060002001805461012b9061077a565b80601f01602080910402602001604051908101604052809291908181526020018280546101579061077a565b80156101a45780601f10610179576101008083540402835291602001916101a4565b820191906000526020600020905b81548152906001019060200180831161018757829003601f168201915b50505050508152602001906001019061010c565b5050505092508180546101ca9061077a565b80601f01602080910402602001604051908101604052809291908181526020018280546101f69061077a565b80156102435780601f1061021857610100808354040283529160200191610243565b820191906000526020600020905b81548152906001019060200180831161022657829003601f168201915b50505050509150975097509750975097505050509295509295909350565b606061026d8383610274565b9392505050565b60606000838360405160200161028b9291906107b5565b60408051808303601f19018152919052949350505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156102dc576102dc6102a3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561030b5761030b6102a3565b604052919050565b600067ffffffffffffffff82111561032d5761032d6102a3565b5060051b60200190565b803563ffffffff8116811461034b57600080fd5b919050565b600067ffffffffffffffff83111561036a5761036a6102a3565b61037d601f8401601f19166020016102e2565b905082815283838301111561039157600080fd5b828260208301376000602084830101529392505050565b600082601f8301126103b957600080fd5b61026d83833560208501610350565b600082601f8301126103d957600080fd5b813560206103ee6103e983610313565b6102e2565b82815260059290921b8401810191818101908684111561040d57600080fd5b8286015b8481101561044d57803567ffffffffffffffff8111156104315760008081fd5b61043f8986838b01016103a8565b845250918301918301610411565b509695505050505050565b6000806040838503121561046b57600080fd5b823567ffffffffffffffff8082111561048357600080fd5b818501915085601f83011261049757600080fd5b813560206104a76103e983610313565b82815260059290921b840181019181810190898411156104c657600080fd5b8286015b848110156105d9578035868111156104e157600080fd5b87016060818d03601f190112156104f757600080fd5b6104ff6102b9565b61050a868301610337565b815260408201358881111561051e57600080fd5b8201603f81018e1361052f57600080fd5b6105408e8883013560408401610350565b878301525060608201358881111561055757600080fd5b8083019250508c603f83011261056c57600080fd5b8582013561057c6103e982610313565b81815260059190911b83018701870190878101908f83111561059d57600080fd5b6040850194505b828510156105c4576105b585610337565b825293880193908801906105a4565b604084015250508452509183019183016104ca565b50965050860135925050808211156105f057600080fd5b506105fd858286016103c8565b9150509250929050565b60005b8381101561062257818101518382015260200161060a565b83811115610631576000848401525b50505050565b6000815180845261064f816020860160208601610607565b601f01601f19169290920160200192915050565b60a08152600061067660a0830188610637565b6020838203818501526106898289610637565b915083820360408501528187518084528284019150828160051b850101838a0160005b838110156106da57601f198784030185526106c8838351610637565b948601949250908501906001016106ac565b505086810360608801526106ee818a610637565b95505050505050610703608083018415159052565b9695505050505050565b6000806040838503121561072057600080fd5b823567ffffffffffffffff8082111561073857600080fd5b610744868387016103a8565b9350602085013591508082111561075a57600080fd5b506105fd858286016103a8565b60208152600061026d6020830184610637565b600181811c9082168061078e57607f821691505b602082108114156107af57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516107c7818460208801610607565b8351908301906107db818360208801610607565b0194935050505056fea2646970667358221220d4508ca4edbbc299296fc8dfc0223e54a63c733d541d0f6109c778d0af6539b064736f6c634300080b0033";

	// GetI64.sol bytecode
	const GET_I64_BYTE_CODE: &str = "608060405234801561001057600080fd5b50610a3f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063e256184614610046578063ed043e0f14610073578063f5e19bc0146100a0575b600080fd5b610059610054366004610577565b6100b3565b60405161006a959493929190610772565b60405180910390f35b61008661008136600461081c565b61028c565b60408051921515835260079190910b60208301520161006a565b6100866100ae3660046108c9565b6102f6565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156101e357838290600052602060002001805461015690610923565b80601f016020809104026020016040519081016040528092919081815260200182805461018290610923565b80156101cf5780601f106101a4576101008083540402835291602001916101cf565b820191906000526020600020905b8154815290600101906020018083116101b257829003601f168201915b505050505081526020019060010190610137565b5050505092508180546101f590610923565b80601f016020809104026020016040519081016040528092919081815260200182805461022190610923565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b50505050509150975097509750975097505050509295509295909350565b6040805160008082526020820190925281908190816102cd565b60408051808201909152606080825260208201528152602001906001900390816102a65790505b5090506102db878783610351565b50506102e8858583610351565b925092505094509492505050565b604080516000808252602082019092528190819081610337565b60408051808201909152606080825260208201528152602001906001900390816103105790505b509050610345858583610351565b92509250509250929050565b600080600080600087878760405160200161036e9392919061095e565b60408051601f198184030181528282528051909350919081836020860160006103e8600019f161039d57600080fd5b8051602082015160409283019092529a909950975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156103f4576103f46103bb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610423576104236103bb565b604052919050565b600067ffffffffffffffff821115610445576104456103bb565b5060051b60200190565b803563ffffffff8116811461046357600080fd5b919050565b600067ffffffffffffffff831115610482576104826103bb565b610495601f8401601f19166020016103fa565b90508281528383830111156104a957600080fd5b828260208301376000602084830101529392505050565b600082601f8301126104d157600080fd5b6104e083833560208501610468565b9392505050565b600082601f8301126104f857600080fd5b8135602061050d6105088361042b565b6103fa565b82815260059290921b8401810191818101908684111561052c57600080fd5b8286015b8481101561056c57803567ffffffffffffffff8111156105505760008081fd5b61055e8986838b01016104c0565b845250918301918301610530565b509695505050505050565b6000806040838503121561058a57600080fd5b823567ffffffffffffffff808211156105a257600080fd5b818501915085601f8301126105b657600080fd5b813560206105c66105088361042b565b82815260059290921b840181019181810190898411156105e557600080fd5b8286015b848110156106f75780358681111561060057600080fd5b87016060818d03601f1901121561061657600080fd5b61061e6103d1565b61062986830161044f565b815260408201358881111561063d57600080fd5b8201603f81018e1361064e57600080fd5b61065f8e8883013560408401610468565b878301525060608201358881111561067657600080fd5b8083019250508c603f83011261068b57600080fd5b8582013561069b6105088261042b565b81815260059190911b830160400190878101908f8311156106bb57600080fd5b6040850194505b828510156106e2576106d38561044f565b825293880193908801906106c2565b604084015250508452509183019183016105e9565b509650508601359250508082111561070e57600080fd5b5061071b858286016104e7565b9150509250929050565b6000815180845260005b8181101561074b5760208185018101518683018201520161072f565b8181111561075d576000602083870101525b50601f01601f19169290920160200192915050565b60a08152600061078560a0830188610725565b6020838203818501526107988289610725565b915083820360408501528187518084528284019150828160051b850101838a0160005b838110156107e957601f198784030185526107d7838351610725565b948601949250908501906001016107bb565b505086810360608801526107fd818a610725565b95505050505050610812608083018415159052565b9695505050505050565b6000806000806080858703121561083257600080fd5b843567ffffffffffffffff8082111561084a57600080fd5b610856888389016104c0565b9550602087013591508082111561086c57600080fd5b610878888389016104c0565b9450604087013591508082111561088e57600080fd5b61089a888389016104c0565b935060608701359150808211156108b057600080fd5b506108bd878288016104c0565b91505092959194509250565b600080604083850312156108dc57600080fd5b823567ffffffffffffffff808211156108f457600080fd5b610900868387016104c0565b9350602085013591508082111561091657600080fd5b5061071b858286016104c0565b600181811c9082168061093757607f821691505b6020821081141561095857634e487b7160e01b600052602260045260246000fd5b50919050565b6060815260006109716060830186610725565b6020838203818501526109848287610725565b91506040848303818601528286518085528385019150838160051b86010184890160005b838110156109f857878303601f19018552815180518785526109cc88860182610725565b91890151858303868b01529190506109e48183610725565b9689019694505050908601906001016109a8565b50909b9a505050505050505050505056fea2646970667358221220dc347f537bd4447b1735029849707e20da3e7d2b936a4d52101bb4c795e2cb9e64736f6c634300080b0033";

	// GetBool.sol bytecode
	const GET_BOOL_BYTE_CODE: &str = "608060405234801561001057600080fd5b50610a38806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637083d8ec14610046578063e256184614610075578063fe59859114610099575b600080fd5b6100596100543660046104a3565b6100ac565b6040805192151583529015156020830152015b60405180910390f35b61008861008336600461061d565b610116565b60405161006c959493929190610818565b6100596100a73660046108c2565b6102ef565b6040805160008082526020820190925281908190816100ed565b60408051808201909152606080825260208201528152602001906001900390816100c65790505b5090506100fb87878361034a565b505061010885858361034a565b925092505094509492505050565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156102465783829060005260206000200180546101b99061091c565b80601f01602080910402602001604051908101604052809291908181526020018280546101e59061091c565b80156102325780601f1061020757610100808354040283529160200191610232565b820191906000526020600020905b81548152906001019060200180831161021557829003601f168201915b50505050508152602001906001019061019a565b5050505092508180546102589061091c565b80601f01602080910402602001604051908101604052809291908181526020018280546102849061091c565b80156102d15780601f106102a6576101008083540402835291602001916102d1565b820191906000526020600020905b8154815290600101906020018083116102b457829003601f168201915b50505050509150975097509750975097505050509295509295909350565b604080516000808252602082019092528190819081610330565b60408051808201909152606080825260208201528152602001906001900390816103095790505b50905061033e85858361034a565b92509250509250929050565b600080600080600087878760405160200161036793929190610957565b60408051601f198184030181528282528051909350919081836020860160006103e9600019f161039657600080fd5b8051602082015160409283019092529a909950975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156103ed576103ed6103b4565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561041c5761041c6103b4565b604052919050565b600067ffffffffffffffff83111561043e5761043e6103b4565b610451601f8401601f19166020016103f3565b905082815283838301111561046557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261048d57600080fd5b61049c83833560208501610424565b9392505050565b600080600080608085870312156104b957600080fd5b843567ffffffffffffffff808211156104d157600080fd5b6104dd8883890161047c565b955060208701359150808211156104f357600080fd5b6104ff8883890161047c565b9450604087013591508082111561051557600080fd5b6105218883890161047c565b9350606087013591508082111561053757600080fd5b506105448782880161047c565b91505092959194509250565b600067ffffffffffffffff82111561056a5761056a6103b4565b5060051b60200190565b803563ffffffff8116811461058857600080fd5b919050565b600082601f83011261059e57600080fd5b813560206105b36105ae83610550565b6103f3565b82815260059290921b840181019181810190868411156105d257600080fd5b8286015b8481101561061257803567ffffffffffffffff8111156105f65760008081fd5b6106048986838b010161047c565b8452509183019183016105d6565b509695505050505050565b6000806040838503121561063057600080fd5b823567ffffffffffffffff8082111561064857600080fd5b818501915085601f83011261065c57600080fd5b8135602061066c6105ae83610550565b82815260059290921b8401810191818101908984111561068b57600080fd5b8286015b8481101561079d578035868111156106a657600080fd5b87016060818d03601f190112156106bc57600080fd5b6106c46103ca565b6106cf868301610574565b81526040820135888111156106e357600080fd5b8201603f81018e136106f457600080fd5b6107058e8883013560408401610424565b878301525060608201358881111561071c57600080fd5b8083019250508c603f83011261073157600080fd5b858201356107416105ae82610550565b81815260059190911b830160400190878101908f83111561076157600080fd5b6040850194505b828510156107885761077985610574565b82529388019390880190610768565b6040840152505084525091830191830161068f565b50965050860135925050808211156107b457600080fd5b506107c18582860161058d565b9150509250929050565b6000815180845260005b818110156107f1576020818501810151868301820152016107d5565b81811115610803576000602083870101525b50601f01601f19169290920160200192915050565b60a08152600061082b60a08301886107cb565b60208382038185015261083e82896107cb565b915083820360408501528187518084528284019150828160051b850101838a0160005b8381101561088f57601f1987840301855261087d8383516107cb565b94860194925090850190600101610861565b505086810360608801526108a3818a6107cb565b955050505050506108b8608083018415159052565b9695505050505050565b600080604083850312156108d557600080fd5b823567ffffffffffffffff808211156108ed57600080fd5b6108f98683870161047c565b9350602085013591508082111561090f57600080fd5b506107c18582860161047c565b600181811c9082168061093057607f821691505b6020821081141561095157634e487b7160e01b600052602260045260246000fd5b50919050565b60608152600061096a60608301866107cb565b60208382038185015261097d82876107cb565b91506040848303818601528286518085528385019150838160051b86010184890160005b838110156109f157878303601f19018552815180518785526109c5888601826107cb565b91890151858303868b01529190506109dd81836107cb565b9689019694505050908601906001016109a1565b50909b9a505050505050505050505056fea2646970667358221220d32b94fab7696bf8cf3fc9b2184f1a396acbf4974cf49a325d576a241e12569564736f6c634300080b0033";

	#[test]
	pub fn test_to_hex() {
		// given
		let text = "test";
		let byte_code = hex::decode(TO_HEX_BYTE_CODE).unwrap();
		let input_data =
			prepare_function_call_input("8876183c", encode(&[Token::String(text.to_string())]))
				.unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::String];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!("0x".to_owned() + &hex::encode(text), decoded[1].clone().into_string().unwrap());
	}

	#[test]
	pub fn test_concatenate_strings() {
		// given
		let byte_code = hex::decode(CONCATENATE_STRINGS_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input(
			"f2baa36e",
			encode(&[Token::String("foo".to_string()), Token::String("bar".to_string())]),
		)
		.unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::String];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!("foobar", decoded[0].clone().into_string().unwrap());
	}

	#[test]
	pub fn test_get_i64() {
		run(19530).unwrap();

		// given
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("f5e19bc0", encode(&[Token::String("http://localhost:19530/2/users/by/username/twitterdev?user.fields=public_metrics".to_string()), Token::String("/data/public_metrics/followers_count".to_string())])).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Int(2)];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(100), decoded[1].clone().into_int().unwrap());
	}

	#[test]
	pub fn test_get_i64_with_failure() {
		// given
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input(
			"f5e19bc0",
			encode(&[
				Token::String(
					"http://localhost:1/2/users/by/username/twitterdev?user.fields=public_metrics"
						.to_string(),
				),
				Token::String("/data/public_metrics/followers_count".to_string()),
			]),
		)
		.unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Int(2)];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(false, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(0), decoded[1].clone().into_int().unwrap());
	}

	//we want to check here that execution is not interrupted by http error
	#[test]
	pub fn test_get_i64_returns_second_error_in_case_of_first_request_failure() {
		run(19532).unwrap();

		// given
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("ed043e0f",
													 encode(
														 &[
															 // this one uses different port so service is unavailable
															Token::String("http://localhost:1/2/users/by/username/twitterdev?user.fields=public_metrics".to_string()),
															Token::String("/data/public_metrics/followers_count".to_string()),
														 	Token::String("http://localhost:19532/2/users/by/username/twitterdev?user.fields=public_metrics".to_string()),
														 	Token::String("/data/public_metrics/followers_count".to_string())
														 ]
													 )
		).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Int(2)];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(100), decoded[1].clone().into_int().unwrap());
	}

	#[test]
	pub fn test_get_bool_with_success_and_true_result() {
		run(19531).unwrap();

		// given
		let byte_code = hex::decode(GET_BOOL_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("fe598591", encode(&[Token::String("http://localhost:19531/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d".to_string()), Token::String("/hasJoined".to_string())])).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Bool];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(true, decoded[1].clone().into_bool().unwrap());
	}

	#[test]
	pub fn test_get_bool_with_failure() {
		// given
		let byte_code = hex::decode(GET_BOOL_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("fe598591", encode(&[Token::String("http://localhost:1/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d".to_string()), Token::String("/hasJoined".to_string())])).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Bool];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(false, decoded[0].clone().into_bool().unwrap());
		assert_eq!(false, decoded[1].clone().into_bool().unwrap());
	}

	//we want to check here that execution is not interrupted by http error
	#[test]
	pub fn test_get_bool_returns_second_error_in_case_of_first_request_failure() {
		run(19533).unwrap();

		// given
		let byte_code = hex::decode(GET_BOOL_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("7083d8ec",
													 encode(
														&[
															 // this one uses different port so service is unavailable
															Token::String("http://localhost:1/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d".to_string()),
															Token::String("/hasJoined".to_string()),
															Token::String("http://localhost:19533/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d".to_string()),
															Token::String("/hasJoined".to_string())
														]
													 )
		).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Bool];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(true, decoded[1].clone().into_bool().unwrap());
	}
}

#[cfg(test)]
pub mod assertion_test {
	use crate::dynamic::{build, repository::InMemorySmartContractRepo};
	use itp_types::Assertion;
	use lc_mock_server::run;
	use lc_stf_task_sender::AssertionBuildRequest;
	use litentry_primitives::{Identity, IdentityString};
	use sp_core::{crypto::AccountId32, H160};

	#[test]
	pub fn test_a20_true() {
		let _ = env_logger::builder().is_test(true).try_init();
		run(19527).unwrap();
		// given
		let twitter_identity = Identity::Twitter(IdentityString::new(vec![]));

		let substrate_identity = Identity::Substrate(
			AccountId32::new([
				212, 53, 147, 199, 21, 253, 211, 28, 97, 20, 26, 189, 4, 169, 159, 214, 130, 44,
				133, 88, 133, 76, 205, 227, 154, 86, 132, 231, 165, 109, 162, 125,
			])
			.into(),
		);

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(1)),
			identities: vec![(twitter_identity, vec![]), (substrate_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(1), repository.into()).unwrap();

		// then
		assert!(credential.credential_subject.values[0]);
	}

	#[test]
	pub fn test_a1_true() {
		let _ = env_logger::builder().is_test(true).try_init();
		// given
		let twitter_identity = Identity::Twitter(IdentityString::new(vec![]));
		let substrate_identity = Identity::Substrate(AccountId32::new([0; 32]).into());

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(0)),
			identities: vec![(twitter_identity, vec![]), (substrate_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(0), repository.into()).unwrap();

		// then
		assert!(credential.credential_subject.values[0]);
	}

	#[test]
	pub fn test_a6_true() {
		let _ = env_logger::builder().is_test(true).try_init();
		run(19528).unwrap();
		// given
		let twitter_identity =
			Identity::Twitter(IdentityString::new("twitterdev".as_bytes().to_vec()));
		let substrate_identity = Identity::Substrate(AccountId32::new([0; 32]).into());

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(2)),
			identities: vec![(twitter_identity, vec![]), (substrate_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(2), repository.into()).unwrap();

		println!("Credential is: {:?}", credential);

		// then
		assert!(credential.credential_subject.values[0]);
	}

	#[test]
	pub fn test_a1_false() {
		let _ = env_logger::builder().is_test(true).try_init();
		// given
		let twitter_identity = Identity::Twitter(IdentityString::new(vec![]));

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(0)),
			identities: vec![(twitter_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(0), repository.into()).unwrap();

		// then
		assert!(!credential.credential_subject.values[0]);
	}

	fn hash(a: u64) -> H160 {
		H160::from_low_u64_be(a)
	}
}
