// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

use crate::{dynamic::repository::SmartContractByteCode, *};
use itp_types::Assertion;
use lc_credentials::{assertion_logic::AssertionLogic, Credential, IssuerRuntimeVersion};
use lc_dynamic_assertion::{AssertionExecutor, AssertionLogicRepository};
use lc_evm_dynamic_assertions::EvmAssertionExecutor;
use lc_stf_task_sender::AssertionBuildRequest;
use log::error;
use primitive_types::H160;

pub mod repository;

pub fn build<
	SC: AssertionLogicRepository<Id = H160, Item = (SmartContractByteCode, Vec<String>)>,
>(
	req: &AssertionBuildRequest,
	smart_contract_id: SC::Id,
	repository: Arc<SC>,
) -> Result<Credential> {
	let executor = EvmAssertionExecutor { assertion_repository: repository };
	let result = executor.execute(smart_contract_id, &req.identities).map_err(|e| {
		Error::RequestVCFailed(
			Assertion::Dynamic(smart_contract_id),
			ErrorDetail::StfError(ErrorString::truncate_from(e.into())),
		)
	})?;

	let runtime_version = IssuerRuntimeVersion {
		parachain: req.parachain_runtime_version,
		sidechain: req.sidechain_runtime_version,
	};

	match Credential::new(&req.who, &req.shard, &runtime_version) {
		Ok(mut credential_unsigned) => {
			let mut assertion_values: Vec<AssertionLogic> = vec![];
			for assertion in result.assertions {
				let logic: AssertionLogic = serde_json::from_str(&assertion).map_err(|e| {
					Error::RequestVCFailed(
						Assertion::Dynamic(smart_contract_id),
						ErrorDetail::StfError(ErrorString::truncate_from(format!("{}", e).into())),
					)
				})?;
				assertion_values.push(logic);
			}

			credential_unsigned.update_dynamic(
				result.description,
				result.assertion_type,
				assertion_values,
				result.schema_url,
				result.meet,
			);
			Ok(credential_unsigned)
		},
		Err(e) => {
			error!("Generate unsigned credential failed {:?}", e);
			Err(Error::RequestVCFailed(
				Assertion::Dynamic(smart_contract_id),
				e.into_error_detail(),
			))
		},
	}
}

#[cfg(test)]
pub mod dynamic_assertion_test {
	use ethabi::{encode, Token};
	use lc_evm_dynamic_assertions::{execute_smart_contract, prepare_function_call_input};
	use lc_mock_server::run;
	use primitive_types::U256;

	// ToHex.sol bytecode
	const TO_HEX_BYTE_CODE: &str = "608060405234801561001057600080fd5b506107df806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638876183c1461003b578063e256184614610064575b600080fd5b61004e6100493660046103ac565b610088565b60405161005b9190610436565b60405180910390f35b610077610072366004610516565b610099565b60405161005b9594939291906106c4565b606061009382610272565b92915050565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156101c957838290600052602060002001805461013c9061076e565b80601f01602080910402602001604051908101604052809291908181526020018280546101689061076e565b80156101b55780601f1061018a576101008083540402835291602001916101b5565b820191906000526020600020905b81548152906001019060200180831161019857829003601f168201915b50505050508152602001906001019061011d565b5050505092508180546101db9061076e565b80601f01602080910402602001604051908101604052809291908181526020018280546102079061076e565b80156102545780601f1061022957610100808354040283529160200191610254565b820191906000526020600020905b81548152906001019060200180831161023757829003601f168201915b50505050509150975097509750975097505050509295509295909350565b60606000826040516020016102879190610436565b60408051601f1981840301815291905280519091506082838260208501600061041b600019f16102b657600080fd5b5050919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156102f6576102f66102bd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610325576103256102bd565b604052919050565b600067ffffffffffffffff831115610347576103476102bd565b61035a601f8401601f19166020016102fc565b905082815283838301111561036e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261039657600080fd5b6103a58383356020850161032d565b9392505050565b6000602082840312156103be57600080fd5b813567ffffffffffffffff8111156103d557600080fd5b6103e184828501610385565b949350505050565b6000815180845260005b8181101561040f576020818501810151868301820152016103f3565b81811115610421576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006103a560208301846103e9565b600067ffffffffffffffff821115610463576104636102bd565b5060051b60200190565b803563ffffffff8116811461048157600080fd5b919050565b600082601f83011261049757600080fd5b813560206104ac6104a783610449565b6102fc565b82815260059290921b840181019181810190868411156104cb57600080fd5b8286015b8481101561050b57803567ffffffffffffffff8111156104ef5760008081fd5b6104fd8986838b0101610385565b8452509183019183016104cf565b509695505050505050565b6000806040838503121561052957600080fd5b823567ffffffffffffffff8082111561054157600080fd5b818501915085601f83011261055557600080fd5b813560206105656104a783610449565b82815260059290921b8401810191818101908984111561058457600080fd5b8286015b848110156106965780358681111561059f57600080fd5b87016060818d03601f190112156105b557600080fd5b6105bd6102d3565b6105c886830161046d565b81526040820135888111156105dc57600080fd5b8201603f81018e136105ed57600080fd5b6105fe8e888301356040840161032d565b878301525060608201358881111561061557600080fd5b8083019250508c603f83011261062a57600080fd5b8582013561063a6104a782610449565b81815260059190911b830160400190878101908f83111561065a57600080fd5b6040850194505b82851015610681576106728561046d565b82529388019390880190610661565b60408401525050845250918301918301610588565b50965050860135925050808211156106ad57600080fd5b506106ba85828601610486565b9150509250929050565b60a0815260006106d760a08301886103e9565b6020838203818501526106ea82896103e9565b915083820360408501528187518084528284019150828160051b850101838a0160005b8381101561073b57601f198784030185526107298383516103e9565b9486019492509085019060010161070d565b5050868103606088015261074f818a6103e9565b95505050505050610764608083018415159052565b9695505050505050565b600181811c9082168061078257607f821691505b602082108114156107a357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212203cf1d6eb7c4fe44d326d0a5d386646fdef08a68cccb3ed1500f49aabb85b780664736f6c634300080b0033";

	// ConcatenateStrings.sol bytecode
	const CONCATENATE_STRINGS_BYTE_CODE: &str = "608060405234801561001057600080fd5b5061081a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e25618461461003b578063f2baa36e14610068575b600080fd5b61004e610049366004610458565b610088565b60405161005f959493929190610663565b60405180910390f35b61007b61007636600461070d565b610261565b60405161005f9190610767565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156101b857838290600052602060002001805461012b9061077a565b80601f01602080910402602001604051908101604052809291908181526020018280546101579061077a565b80156101a45780601f10610179576101008083540402835291602001916101a4565b820191906000526020600020905b81548152906001019060200180831161018757829003601f168201915b50505050508152602001906001019061010c565b5050505092508180546101ca9061077a565b80601f01602080910402602001604051908101604052809291908181526020018280546101f69061077a565b80156102435780601f1061021857610100808354040283529160200191610243565b820191906000526020600020905b81548152906001019060200180831161022657829003601f168201915b50505050509150975097509750975097505050509295509295909350565b606061026d8383610274565b9392505050565b60606000838360405160200161028b9291906107b5565b60408051808303601f19018152919052949350505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156102dc576102dc6102a3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561030b5761030b6102a3565b604052919050565b600067ffffffffffffffff82111561032d5761032d6102a3565b5060051b60200190565b803563ffffffff8116811461034b57600080fd5b919050565b600067ffffffffffffffff83111561036a5761036a6102a3565b61037d601f8401601f19166020016102e2565b905082815283838301111561039157600080fd5b828260208301376000602084830101529392505050565b600082601f8301126103b957600080fd5b61026d83833560208501610350565b600082601f8301126103d957600080fd5b813560206103ee6103e983610313565b6102e2565b82815260059290921b8401810191818101908684111561040d57600080fd5b8286015b8481101561044d57803567ffffffffffffffff8111156104315760008081fd5b61043f8986838b01016103a8565b845250918301918301610411565b509695505050505050565b6000806040838503121561046b57600080fd5b823567ffffffffffffffff8082111561048357600080fd5b818501915085601f83011261049757600080fd5b813560206104a76103e983610313565b82815260059290921b840181019181810190898411156104c657600080fd5b8286015b848110156105d9578035868111156104e157600080fd5b87016060818d03601f190112156104f757600080fd5b6104ff6102b9565b61050a868301610337565b815260408201358881111561051e57600080fd5b8201603f81018e1361052f57600080fd5b6105408e8883013560408401610350565b878301525060608201358881111561055757600080fd5b8083019250508c603f83011261056c57600080fd5b8582013561057c6103e982610313565b81815260059190911b83018701870190878101908f83111561059d57600080fd5b6040850194505b828510156105c4576105b585610337565b825293880193908801906105a4565b604084015250508452509183019183016104ca565b50965050860135925050808211156105f057600080fd5b506105fd858286016103c8565b9150509250929050565b60005b8381101561062257818101518382015260200161060a565b83811115610631576000848401525b50505050565b6000815180845261064f816020860160208601610607565b601f01601f19169290920160200192915050565b60a08152600061067660a0830188610637565b6020838203818501526106898289610637565b915083820360408501528187518084528284019150828160051b850101838a0160005b838110156106da57601f198784030185526106c8838351610637565b948601949250908501906001016106ac565b505086810360608801526106ee818a610637565b95505050505050610703608083018415159052565b9695505050505050565b6000806040838503121561072057600080fd5b823567ffffffffffffffff8082111561073857600080fd5b610744868387016103a8565b9350602085013591508082111561075a57600080fd5b506105fd858286016103a8565b60208152600061026d6020830184610637565b600181811c9082168061078e57607f821691505b602082108114156107af57634e487b7160e01b600052602260045260246000fd5b50919050565b600083516107c7818460208801610607565b8351908301906107db818360208801610607565b0194935050505056fea26469706673582212207f15f6f9a5e2fb439abd419e86363251711d69b4eaa101d644a892bb32736a1c64736f6c634300080b0033";

	// GetI64.sol bytecode
	const GET_I64_BYTE_CODE: &str = "608060405234801561001057600080fd5b50610903806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e25618461461003b578063f5e19bc014610068575b600080fd5b61004e6100493660046104e8565b610095565b60405161005f9594939291906106e3565b60405180910390f35b61007b61007636600461078d565b61026e565b60408051921515835260079190910b60208301520161005f565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156101c5578382906000526020600020018054610138906107e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610164906107e7565b80156101b15780601f10610186576101008083540402835291602001916101b1565b820191906000526020600020905b81548152906001019060200180831161019457829003601f168201915b505050505081526020019060010190610119565b5050505092508180546101d7906107e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610203906107e7565b80156102505780601f1061022557610100808354040283529160200191610250565b820191906000526020600020905b81548152906001019060200180831161023357829003601f168201915b50505050509150975097509750975097505050509295509295909350565b6040805160008082526020820190925281908190816102af565b60408051808201909152606080825260208201528152602001906001900390816102885790505b5090506102bd8585836102c9565b92509250509250929050565b60008060008060008787876040516020016102e693929190610822565b60408051601f19818403018152908290528051909250906020818382860160006103e8600019f161031a5760009350600094505b5160019a909950975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156103655761036561032c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103945761039461032c565b604052919050565b600067ffffffffffffffff8211156103b6576103b661032c565b5060051b60200190565b803563ffffffff811681146103d457600080fd5b919050565b600067ffffffffffffffff8311156103f3576103f361032c565b610406601f8401601f191660200161036b565b905082815283838301111561041a57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261044257600080fd5b610451838335602085016103d9565b9392505050565b600082601f83011261046957600080fd5b8135602061047e6104798361039c565b61036b565b82815260059290921b8401810191818101908684111561049d57600080fd5b8286015b848110156104dd57803567ffffffffffffffff8111156104c15760008081fd5b6104cf8986838b0101610431565b8452509183019183016104a1565b509695505050505050565b600080604083850312156104fb57600080fd5b823567ffffffffffffffff8082111561051357600080fd5b818501915085601f83011261052757600080fd5b813560206105376104798361039c565b82815260059290921b8401810191818101908984111561055657600080fd5b8286015b848110156106685780358681111561057157600080fd5b87016060818d03601f1901121561058757600080fd5b61058f610342565b61059a8683016103c0565b81526040820135888111156105ae57600080fd5b8201603f81018e136105bf57600080fd5b6105d08e88830135604084016103d9565b87830152506060820135888111156105e757600080fd5b8083019250508c603f8301126105fc57600080fd5b8582013561060c6104798261039c565b81815260059190911b830160400190878101908f83111561062c57600080fd5b6040850194505b8285101561065357610644856103c0565b82529388019390880190610633565b6040840152505084525091830191830161055a565b509650508601359250508082111561067f57600080fd5b5061068c85828601610458565b9150509250929050565b6000815180845260005b818110156106bc576020818501810151868301820152016106a0565b818111156106ce576000602083870101525b50601f01601f19169290920160200192915050565b60a0815260006106f660a0830188610696565b6020838203818501526107098289610696565b915083820360408501528187518084528284019150828160051b850101838a0160005b8381101561075a57601f19878403018552610748838351610696565b9486019492509085019060010161072c565b5050868103606088015261076e818a610696565b95505050505050610783608083018415159052565b9695505050505050565b600080604083850312156107a057600080fd5b823567ffffffffffffffff808211156107b857600080fd5b6107c486838701610431565b935060208501359150808211156107da57600080fd5b5061068c85828601610431565b600181811c908216806107fb57607f821691505b6020821081141561081c57634e487b7160e01b600052602260045260246000fd5b50919050565b6060815260006108356060830186610696565b6020838203818501526108488287610696565b91506040848303818601528286518085528385019150838160051b86010184890160005b838110156108bc57878303601f190185528151805187855261089088860182610696565b91890151858303868b01529190506108a88183610696565b96890196945050509086019060010161086c565b50909b9a505050505050505050505056fea264697066735822122083f2eff0effff72e4392134e9118f6f25f571d802b87f674cbd14da47037f79064736f6c634300080b0033";

	const GET_BOOL_BYTE_CODE: &str = "608060405234801561001057600080fd5b506108e6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063e25618461461003b578063fe59859114610068575b600080fd5b61004e6100493660046104cb565b61008b565b60405161005f9594939291906106c6565b60405180910390f35b61007b610076366004610770565b610264565b604051901515815260200161005f565b6060806060806000806040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b815250905060006040518060400160405280600e81526020016d617373657274696f6e207479706560901b815250905060008282600060018482805480602002602001604051908101604052809291908181526020016000905b828210156101bb57838290600052602060002001805461012e906107ca565b80601f016020809104026020016040519081016040528092919081815260200182805461015a906107ca565b80156101a75780601f1061017c576101008083540402835291602001916101a7565b820191906000526020600020905b81548152906001019060200180831161018a57829003601f168201915b50505050508152602001906001019061010f565b5050505092508180546101cd906107ca565b80601f01602080910402602001604051908101604052809291908181526020018280546101f9906107ca565b80156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b50505050509150975097509750975097505050509295509295909350565b604080516000808252602082019092528190816102a3565b604080518082019091526060808252602082015281526020019060019003908161027c5790505b5090506102b18484836102b9565b949350505050565b60008060008585856040516020016102d393929190610805565b60408051601f19818403018152908290528051909250906020818382860160006103e9600019f161030357600080fd5b51979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156103485761034861030f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103775761037761030f565b604052919050565b600067ffffffffffffffff8211156103995761039961030f565b5060051b60200190565b803563ffffffff811681146103b757600080fd5b919050565b600067ffffffffffffffff8311156103d6576103d661030f565b6103e9601f8401601f191660200161034e565b90508281528383830111156103fd57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261042557600080fd5b610434838335602085016103bc565b9392505050565b600082601f83011261044c57600080fd5b8135602061046161045c8361037f565b61034e565b82815260059290921b8401810191818101908684111561048057600080fd5b8286015b848110156104c057803567ffffffffffffffff8111156104a45760008081fd5b6104b28986838b0101610414565b845250918301918301610484565b509695505050505050565b600080604083850312156104de57600080fd5b823567ffffffffffffffff808211156104f657600080fd5b818501915085601f83011261050a57600080fd5b8135602061051a61045c8361037f565b82815260059290921b8401810191818101908984111561053957600080fd5b8286015b8481101561064b5780358681111561055457600080fd5b87016060818d03601f1901121561056a57600080fd5b610572610325565b61057d8683016103a3565b815260408201358881111561059157600080fd5b8201603f81018e136105a257600080fd5b6105b38e88830135604084016103bc565b87830152506060820135888111156105ca57600080fd5b8083019250508c603f8301126105df57600080fd5b858201356105ef61045c8261037f565b81815260059190911b830160400190878101908f83111561060f57600080fd5b6040850194505b8285101561063657610627856103a3565b82529388019390880190610616565b6040840152505084525091830191830161053d565b509650508601359250508082111561066257600080fd5b5061066f8582860161043b565b9150509250929050565b6000815180845260005b8181101561069f57602081850181015186830182015201610683565b818111156106b1576000602083870101525b50601f01601f19169290920160200192915050565b60a0815260006106d960a0830188610679565b6020838203818501526106ec8289610679565b915083820360408501528187518084528284019150828160051b850101838a0160005b8381101561073d57601f1987840301855261072b838351610679565b9486019492509085019060010161070f565b50508681036060880152610751818a610679565b95505050505050610766608083018415159052565b9695505050505050565b6000806040838503121561078357600080fd5b823567ffffffffffffffff8082111561079b57600080fd5b6107a786838701610414565b935060208501359150808211156107bd57600080fd5b5061066f85828601610414565b600181811c908216806107de57607f821691505b602082108114156107ff57634e487b7160e01b600052602260045260246000fd5b50919050565b6060815260006108186060830186610679565b60208382038185015261082b8287610679565b91506040848303818601528286518085528385019150838160051b86010184890160005b8381101561089f57878303601f190185528151805187855261087388860182610679565b91890151858303868b015291905061088b8183610679565b96890196945050509086019060010161084f565b50909b9a505050505050505050505056fea2646970667358221220b2ad3ffe6885fdb9a48d32c730598d524106c0325bc62d87075c4ad4d4a5801464736f6c634300080b0033";

	#[test]
	pub fn test_to_hex() {
		// given
		let byte_code = hex::decode(TO_HEX_BYTE_CODE).unwrap();
		let input_data =
			prepare_function_call_input("8876183c", encode(&[Token::String("test".to_string())]))
				.unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::String];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(
			"0x".to_owned() + &hex::encode("test"),
			decoded[0].clone().into_string().unwrap()
		);
	}

	#[test]
	pub fn test_concatenate_strings() {
		// given
		let byte_code = hex::decode(CONCATENATE_STRINGS_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input(
			"f2baa36e",
			encode(&[Token::String("foo".to_string()), Token::String("bar".to_string())]),
		)
		.unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::String];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!("foobar", decoded[0].clone().into_string().unwrap());
	}

	#[test]
	pub fn test_get_i64() {
		run(19530).unwrap();

		// given
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("f5e19bc0", encode(&[Token::String("http://localhost:19530/2/users/by/username/twitterdev?user.fields=public_metrics".to_string()), Token::String("/data/public_metrics/followers_count".to_string())])).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Int(2)];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(100), decoded[1].clone().into_int().unwrap());
	}

	#[test]
	pub fn test_get_i64_http_error() {

		// given
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("f5e19bc0", encode(&[Token::String("http://localhost:19530/2/users/by/username/twitterdev?user.fields=public_metrics".to_string()), Token::String("/data/public_metrics/followers_count".to_string())])).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool, ethabi::ParamType::Int(2)];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(false, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(0), decoded[1].clone().into_int().unwrap());
	}


	#[test]
	pub fn test_get_bool() {
		run(19531).unwrap();

		// given
		let byte_code = hex::decode(GET_BOOL_BYTE_CODE).unwrap();
		let input_data = prepare_function_call_input("fe598591", encode(&[Token::String("http://localhost:19531/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d".to_string()), Token::String("/hasJoined".to_string())])).unwrap();
		let (_, return_data) = execute_smart_contract(byte_code, input_data);
		let types = vec![ethabi::ParamType::Bool];

		// when
		let decoded = ethabi::decode(&types, &return_data).unwrap();

		// then
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
	}
}

#[cfg(test)]
pub mod assertion_test {
	use crate::dynamic::{build, repository::InMemorySmartContractRepo};
	use itp_types::Assertion;
	use lc_mock_server::run;
	use lc_stf_task_sender::AssertionBuildRequest;
	use litentry_primitives::{Identity, IdentityString};
	use sp_core::{crypto::AccountId32, H160};

	#[test]
	pub fn test_a20_true() {
		let _ = env_logger::builder().is_test(true).try_init();
		run(19527).unwrap();
		// given
		let twitter_identity = Identity::Twitter(IdentityString::new(vec![]));

		let substrate_identity = Identity::Substrate(
			AccountId32::new([
				212, 53, 147, 199, 21, 253, 211, 28, 97, 20, 26, 189, 4, 169, 159, 214, 130, 44,
				133, 88, 133, 76, 205, 227, 154, 86, 132, 231, 165, 109, 162, 125,
			])
			.into(),
		);

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(1)),
			identities: vec![(twitter_identity, vec![]), (substrate_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(1), repository.into()).unwrap();

		// then
		assert!(credential.credential_subject.values[0]);
	}

	#[test]
	pub fn test_a1_true() {
		let _ = env_logger::builder().is_test(true).try_init();
		// given
		let twitter_identity = Identity::Twitter(IdentityString::new(vec![]));
		let substrate_identity = Identity::Substrate(AccountId32::new([0; 32]).into());

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(0)),
			identities: vec![(twitter_identity, vec![]), (substrate_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(0), repository.into()).unwrap();

		// then
		assert!(credential.credential_subject.values[0]);
	}

	#[test]
	pub fn test_a6_true() {
		let _ = env_logger::builder().is_test(true).try_init();
		run(19528).unwrap();
		// given
		let twitter_identity =
			Identity::Twitter(IdentityString::new("twitterdev".as_bytes().to_vec()));
		let substrate_identity = Identity::Substrate(AccountId32::new([0; 32]).into());

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(2)),
			identities: vec![(twitter_identity, vec![]), (substrate_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(2), repository.into()).unwrap();

		println!("Credential is: {:?}", credential);

		// then
		assert!(credential.credential_subject.values[0]);
	}

	#[test]
	pub fn test_a1_false() {
		let _ = env_logger::builder().is_test(true).try_init();
		// given
		let twitter_identity = Identity::Twitter(IdentityString::new(vec![]));

		let request = AssertionBuildRequest {
			shard: Default::default(),
			signer: AccountId32::new([0; 32]),
			who: Identity::Twitter(IdentityString::new(vec![])),
			assertion: Assertion::Dynamic(hash(0)),
			identities: vec![(twitter_identity, vec![])],
			top_hash: Default::default(),
			parachain_block_number: Default::default(),
			sidechain_block_number: Default::default(),
			parachain_runtime_version: 0u32,
			sidechain_runtime_version: 0u32,
			maybe_key: None,
			req_ext_hash: Default::default(),
			should_create_id_graph: Default::default(),
		};

		let repository = InMemorySmartContractRepo::new();

		// when
		let credential = build(&request, hash(0), repository.into()).unwrap();

		// then
		assert!(!credential.credential_subject.values[0]);
	}

	fn hash(a: u64) -> H160 {
		H160::from_low_u64_be(a)
	}
}
