// Copyright 2020-2024 Trust Computing GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

use crate::*;
use itc_rest_client::http_client::SendHttpRequest;

http_get_precompile_fn!(http_get_bool, Bool, as_bool);
http_get_precompile_fn!(http_get_i64, Uint, as_i64);
http_get_precompile_fn!(http_get_string, String, as_str);

#[cfg(test)]
pub mod test {
	use crate::{
		failure_precompile_output,
		precompiles::{
			http_get::{http_get_bool, http_get_i64, http_get_string},
			mocks::MockedHttpClient,
		},
		success_precompile_output,
	};
	use ethabi::{encode, ethereum_types::U256, Token};

	#[test]
	pub fn test_get_bool() {
		// given
		let client = MockedHttpClient::default();
		let data = prepare_input_data("https://www.litentry.com/", "/bool");

		// when
		let result = http_get_bool(data, client).unwrap();

		// then
		assert_eq!(success_precompile_output(Token::Bool(true)), result)
	}

	#[test]
	pub fn test_get_i64() {
		// given
		let client = MockedHttpClient::default();
		let data = prepare_input_data("https://www.litentry.com/", "/i64");

		// when
		let result = http_get_i64(data, client).unwrap();

		// then
		assert_eq!(success_precompile_output(Token::Uint(U256::try_from(10).unwrap())), result)
	}

	#[test]
	pub fn test_get_string() {
		// given
		let client = MockedHttpClient::default();
		let data = prepare_input_data("https://www.litentry.com/", "/string");

		// when
		let result = http_get_string(data, client).unwrap();

		// then
		assert_eq!(success_precompile_output(Token::String("string".to_string())), result)
	}

	#[test]
	pub fn returns_failure_for_invalid_url() {
		// given
		let client = MockedHttpClient::default();
		let data = prepare_input_data("invalid_url", "/string");

		// when
		let result = http_get_string(data, client).unwrap();

		// then
		assert_eq!(failure_precompile_output(Token::String(Default::default())), result)
	}

	#[test]
	pub fn returns_failure_for_invalid_json_pointer() {
		// given
		let client = MockedHttpClient::default();
		let data = prepare_input_data("https://www.litentry.com/", "invalid_pointer");

		// when
		let result = http_get_string(data, client).unwrap();

		// then
		assert_eq!(failure_precompile_output(Token::String(Default::default())), result)
	}

	#[test]
	pub fn returns_failure_for_malformed_json() {
		// given
		let client = MockedHttpClient::malformed_json();
		let data = prepare_input_data("https://www.litentry.com/", "string");

		// when
		let result = http_get_string(data, client).unwrap();

		// then
		assert_eq!(failure_precompile_output(Token::String(Default::default())), result)
	}

	#[test]
	pub fn returns_failure_for_value_of_type_other_than_expected() {
		// given
		let client = MockedHttpClient::default();
		let data = prepare_input_data("https://www.litentry.com/", "/not_bool");

		// when
		let result = http_get_bool(data, client).unwrap();

		// then
		assert_eq!(failure_precompile_output(Token::Bool(Default::default())), result)
	}

	#[test]
	pub fn returns_failure_for_invalid_input_data() {
		// given
		let client = MockedHttpClient::default();
		let data = [0u8, 11];

		// when
		let result = http_get_bool(data.to_vec(), client).unwrap();

		// then
		assert_eq!(failure_precompile_output(Token::Bool(Default::default())), result)
	}

	#[test]
	pub fn returns_error_for_http_error() {
		// given
		let client = MockedHttpClient::http_error();
		let data = prepare_input_data("https://www.litentry.com/", "string");

		// when
		let result = http_get_string(data, client).unwrap();

		// then
		assert_eq!(failure_precompile_output(Token::String(Default::default())), result)
	}

	fn prepare_input_data(url: &str, pointer: &str) -> Vec<u8> {
		encode(&[
			Token::String(url.to_string()),
			Token::String(pointer.to_string()),
			Token::Array(vec![]),
		])
	}
}

#[cfg(test)]
pub mod integration_test {
	use crate::{execute_smart_contract, prepare_function_call_input};
	use ethabi::{decode, encode, ethereum_types::U256, ParamType, Token};
	use lc_mock_server::run;

	// tee-worker/litentry/core/assertion-build/src/dynamic/contracts/tests/GetI64.sol
	const GET_I64_FUNCTION_HASH_0: &str = "f5e19bc0"; // callGetI64(string,string)
	const GET_I64_FUNCTION_HASH_1: &str = "ed043e0f"; // callGetI64TwiceAndReturnSecondResult(string,string,string,string)
	const GET_I64_BYTE_CODE: &str = "608060405234801561001057600080fd5b50610783806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ed043e0f1461003b578063f5e19bc01461006c575b600080fd5b6100556004803603810190610050919061037a565b61009d565b604051610063929190610488565b60405180910390f35b610086600480360381019061008191906104b1565b61011e565b604051610094929190610488565b60405180910390f35b60008060008067ffffffffffffffff8111156100bc576100bb61024f565b5b6040519080825280602002602001820160405280156100f557816020015b6100e2610206565b8152602001906001900390816100da5790505b509050610103878783610190565b5050610110858583610190565b925092505094509492505050565b60008060008067ffffffffffffffff81111561013d5761013c61024f565b5b60405190808252806020026020018201604052801561017657816020015b610163610206565b81526020019060019003908161015b5790505b509050610184858583610190565b92509250509250929050565b60008060008060008787876040516020016101ad93929190610701565b6040516020818303038152906040529050600081519050604051604081836020860160006103e8600019f16101e157600080fd5b8051945060208101519350604081016040525083839550955050505050935093915050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102878261023e565b810181811067ffffffffffffffff821117156102a6576102a561024f565b5b80604052505050565b60006102b9610220565b90506102c5828261027e565b919050565b600067ffffffffffffffff8211156102e5576102e461024f565b5b6102ee8261023e565b9050602081019050919050565b82818337600083830152505050565b600061031d610318846102ca565b6102af565b90508281526020810184848401111561033957610338610239565b5b6103448482856102fb565b509392505050565b600082601f83011261036157610360610234565b5b813561037184826020860161030a565b91505092915050565b600080600080608085870312156103945761039361022a565b5b600085013567ffffffffffffffff8111156103b2576103b161022f565b5b6103be8782880161034c565b945050602085013567ffffffffffffffff8111156103df576103de61022f565b5b6103eb8782880161034c565b935050604085013567ffffffffffffffff81111561040c5761040b61022f565b5b6104188782880161034c565b925050606085013567ffffffffffffffff8111156104395761043861022f565b5b6104458782880161034c565b91505092959194509250565b60008115159050919050565b61046681610451565b82525050565b60008160070b9050919050565b6104828161046c565b82525050565b600060408201905061049d600083018561045d565b6104aa6020830184610479565b9392505050565b600080604083850312156104c8576104c761022a565b5b600083013567ffffffffffffffff8111156104e6576104e561022f565b5b6104f28582860161034c565b925050602083013567ffffffffffffffff8111156105135761051261022f565b5b61051f8582860161034c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610563578082015181840152602081019050610548565b83811115610572576000848401525b50505050565b600061058382610529565b61058d8185610534565b935061059d818560208601610545565b6105a68161023e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006105f982610529565b61060381856105dd565b9350610613818560208601610545565b61061c8161023e565b840191505092915050565b6000604083016000830151848203600086015261064482826105ee565b9150506020830151848203602086015261065e82826105ee565b9150508091505092915050565b60006106778383610627565b905092915050565b6000602082019050919050565b6000610697826105b1565b6106a181856105bc565b9350836020820285016106b3856105cd565b8060005b858110156106ef57848403895281516106d0858261066b565b94506106db8361067f565b925060208a019950506001810190506106b7565b50829750879550505050505092915050565b6000606082019050818103600083015261071b8186610578565b9050818103602083015261072f8185610578565b90508181036040830152610743818461068c565b905094935050505056fea26469706673582212207c6995442fefa9ad2c5b108cffcea33d88d6360353d695bdc6669f09b1fb3cbb64736f6c634300080b0033";
	// tee-worker/litentry/core/assertion-build/src/dynamic/contracts/tests/GetBool.sol
	const GET_BOOL_FUNCTION_HASH_0: &str = "fe598591"; // callGetBool(string,string)
	const GET_BOOL_FUNCTION_HASH_1: &str = "7083d8ec"; // callGetBoolTwiceAndReturnSecondResult(string,string,string,string)
	const GET_BOOL_BYTE_CODE: &str = "608060405234801561001057600080fd5b50610767806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637083d8ec1461003b578063fe5985911461006c575b600080fd5b6100556004803603810190610050919061037a565b61009d565b60405161006392919061046c565b60405180910390f35b61008660048036038101906100819190610495565b61011e565b60405161009492919061046c565b60405180910390f35b60008060008067ffffffffffffffff8111156100bc576100bb61024f565b5b6040519080825280602002602001820160405280156100f557816020015b6100e2610206565b8152602001906001900390816100da5790505b509050610103878783610190565b5050610110858583610190565b925092505094509492505050565b60008060008067ffffffffffffffff81111561013d5761013c61024f565b5b60405190808252806020026020018201604052801561017657816020015b610163610206565b81526020019060019003908161015b5790505b509050610184858583610190565b92509250509250929050565b60008060008060008787876040516020016101ad939291906106e5565b6040516020818303038152906040529050600081519050604051604081836020860160006103e9600019f16101e157600080fd5b8051945060208101519350604081016040525083839550955050505050935093915050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102878261023e565b810181811067ffffffffffffffff821117156102a6576102a561024f565b5b80604052505050565b60006102b9610220565b90506102c5828261027e565b919050565b600067ffffffffffffffff8211156102e5576102e461024f565b5b6102ee8261023e565b9050602081019050919050565b82818337600083830152505050565b600061031d610318846102ca565b6102af565b90508281526020810184848401111561033957610338610239565b5b6103448482856102fb565b509392505050565b600082601f83011261036157610360610234565b5b813561037184826020860161030a565b91505092915050565b600080600080608085870312156103945761039361022a565b5b600085013567ffffffffffffffff8111156103b2576103b161022f565b5b6103be8782880161034c565b945050602085013567ffffffffffffffff8111156103df576103de61022f565b5b6103eb8782880161034c565b935050604085013567ffffffffffffffff81111561040c5761040b61022f565b5b6104188782880161034c565b925050606085013567ffffffffffffffff8111156104395761043861022f565b5b6104458782880161034c565b91505092959194509250565b60008115159050919050565b61046681610451565b82525050565b6000604082019050610481600083018561045d565b61048e602083018461045d565b9392505050565b600080604083850312156104ac576104ab61022a565b5b600083013567ffffffffffffffff8111156104ca576104c961022f565b5b6104d68582860161034c565b925050602083013567ffffffffffffffff8111156104f7576104f661022f565b5b6105038582860161034c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561054757808201518184015260208101905061052c565b83811115610556576000848401525b50505050565b60006105678261050d565b6105718185610518565b9350610581818560208601610529565b61058a8161023e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006105dd8261050d565b6105e781856105c1565b93506105f7818560208601610529565b6106008161023e565b840191505092915050565b6000604083016000830151848203600086015261062882826105d2565b9150506020830151848203602086015261064282826105d2565b9150508091505092915050565b600061065b838361060b565b905092915050565b6000602082019050919050565b600061067b82610595565b61068581856105a0565b935083602082028501610697856105b1565b8060005b858110156106d357848403895281516106b4858261064f565b94506106bf83610663565b925060208a0199505060018101905061069b565b50829750879550505050505092915050565b600060608201905081810360008301526106ff818661055c565b90508181036020830152610713818561055c565b905081810360408301526107278184610670565b905094935050505056fea264697066735822122029e9d00dcee526443754516f9675d482d1df8c85c193c0ea11236c4163ca496f64736f6c634300080b0033";
	// tee-worker/litentry/core/assertion-build/src/dynamic/contracts/tests/GetString.sol
	const GET_STRING_FUNCTION_HASH_0: &str = "73260cf2"; // callGetString(string,string)
	const GET_STRING_FUNCTION_HASH_1: &str = "4069716b"; // callGetStringTwiceAndReturnSecondResult(string,string,string,string)
	const GET_STRING_BYTE_CODE: &str = "608060405234801561001057600080fd5b506107e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634069716b1461003b57806373260cf21461006c575b600080fd5b610055600480360381019061005091906103f5565b61009d565b60405161006392919061056f565b60405180910390f35b6100866004803603810190610081919061059f565b61011f565b60405161009492919061056f565b60405180910390f35b6000606060008067ffffffffffffffff8111156100bd576100bc6102ca565b5b6040519080825280602002602001820160405280156100f657816020015b6100e3610281565b8152602001906001900390816100db5790505b509050610104878783610192565b5050610111858583610208565b925092505094509492505050565b6000606060008067ffffffffffffffff81111561013f5761013e6102ca565b5b60405190808252806020026020018201604052801561017857816020015b610165610281565b81526020019060019003908161015d5790505b509050610186858583610208565b92509250509250929050565b60008060008060008787876040516020016101af93929190610767565b6040516020818303038152906040529050600081519050604051604081836020860160006103e8600019f16101e357600080fd5b8051945060208101519350604081016040525083839550955050505050935093915050565b6000606060006060600087878760405160200161022793929190610767565b604051602081830303815290604052905060008151905060405161100081836020860160006103ea600019f161025c57600080fd5b8051945060408101935061100081016040525083839550955050505050935093915050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610302826102b9565b810181811067ffffffffffffffff82111715610321576103206102ca565b5b80604052505050565b600061033461029b565b905061034082826102f9565b919050565b600067ffffffffffffffff8211156103605761035f6102ca565b5b610369826102b9565b9050602081019050919050565b82818337600083830152505050565b600061039861039384610345565b61032a565b9050828152602081018484840111156103b4576103b36102b4565b5b6103bf848285610376565b509392505050565b600082601f8301126103dc576103db6102af565b5b81356103ec848260208601610385565b91505092915050565b6000806000806080858703121561040f5761040e6102a5565b5b600085013567ffffffffffffffff81111561042d5761042c6102aa565b5b610439878288016103c7565b945050602085013567ffffffffffffffff81111561045a576104596102aa565b5b610466878288016103c7565b935050604085013567ffffffffffffffff811115610487576104866102aa565b5b610493878288016103c7565b925050606085013567ffffffffffffffff8111156104b4576104b36102aa565b5b6104c0878288016103c7565b91505092959194509250565b60008115159050919050565b6104e1816104cc565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610521578082015181840152602081019050610506565b83811115610530576000848401525b50505050565b6000610541826104e7565b61054b81856104f2565b935061055b818560208601610503565b610564816102b9565b840191505092915050565b600060408201905061058460008301856104d8565b81810360208301526105968184610536565b90509392505050565b600080604083850312156105b6576105b56102a5565b5b600083013567ffffffffffffffff8111156105d4576105d36102aa565b5b6105e0858286016103c7565b925050602083013567ffffffffffffffff811115610601576106006102aa565b5b61060d858286016103c7565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061065f826104e7565b6106698185610643565b9350610679818560208601610503565b610682816102b9565b840191505092915050565b600060408301600083015184820360008601526106aa8282610654565b915050602083015184820360208601526106c48282610654565b9150508091505092915050565b60006106dd838361068d565b905092915050565b6000602082019050919050565b60006106fd82610617565b6107078185610622565b93508360208202850161071985610633565b8060005b85811015610755578484038952815161073685826106d1565b9450610741836106e5565b925060208a0199505060018101905061071d565b50829750879550505050505092915050565b600060608201905081810360008301526107818186610536565b905081810360208301526107958185610536565b905081810360408301526107a981846106f2565b905094935050505056fea264697066735822122068d3d33b54fcdaec5e45509b8b96565a9f8246b11e88a0b6037d878ac7dd6f2a64736f6c634300080b0033";

	const JSON_BYT_CODE: &str = "608060405234801561001057600080fd5b50611e6c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806341a6653e1461003b578063df2040ef1461005f575b600080fd5b61004361007e565b6040805192151583529015156020830152015b60405180910390f35b6100676100f7565b604080519215158352602083019190915201610056565b60008060006040518060400160405280602081526020017f7b226b6579223a205b7b22626f6f6c5f76616c7565223a20747275657d5d7d2081525090506100ee81604051806040016040528060118152602001702f6b65792f302f626f6f6c5f76616c756560781b815250610166565b92509250509091565b60008060006040518060400160405280601d81526020017f7b226b6579223a205b7b22696e745f76616c7565223a2031307d5d7d2000000081525090506100ee816040518060400160405280601081526020016f2f6b65792f302f696e745f76616c756560801b8152506101a2565b60008060008061017686866101c9565b915091508115610194576001935061018d816102d1565b9250610199565b600093505b50509250929050565b6000806000806101b286866101c9565b915091508115610194576001935061018d8161030d565b6000606060008060006101dd876064610320565b92509250925082600014156102c25760005b818110156102bc5782818151811061020957610209611a8d565b602002602001015160c00151158015610255575061025583828151811061023257610232611a8d565b602002602001015160e00151888051602091820120825192909101919091201490565b156102aa5761029f8884838151811061027057610270611a8d565b60200260200101516020015185848151811061028e5761028e611a8d565b602002602001015160600151610c87565b9450600195506102bc565b806102b481611ab9565b9150506101ef565b506102c7565b600094505b5050509250929050565b60006102f982604051806040016040528060048152602001637472756560e01b815250610d54565b61030557506001919050565b506000919050565b600061031a826000610e79565b92915050565b60006060600080859050600080604051806020016040528060008152509050600061036560405180606001604052806000815260200160008152602001600081525090565b61036e89610fed565b602082015190985090915060009081610385611a40565b885185511015610c6d576000898660000151815181106103a7576103a7611a8d565b01602001516001600160f81b0319169050607b60f81b8114806103d75750605b60f81b6001600160f81b03198216145b1561051d57836103e681611ab9565b9450506103f3868d611097565b909950915088610415575060039b5060009950610c8098505050505050505050565b856040015160001914610458578b86604001518151811061043857610438611a8d565b602002602001015160a001805180919061045190611ad4565b60ff169052505b607b60f81b6001600160f81b0319821614610474576000610477565b60015b9650607b60f81b6001600160f81b0319821614610495576002610498565b60015b829060048111156104ab576104ab611af4565b908160048111156104be576104be611af4565b905250855160208301526001604080840191909152860151606090600019146104f5576104ee878e60008c611182565b90506104f8565b50875b60e08301819052602087015161051090600190611b0a565b604088015250610c599050565b607d60f81b6001600160f81b0319821614806105465750605d60f81b6001600160f81b03198216145b15610735576000607d60f81b6001600160f81b031983161461056957600261056c565b60015b90506000600188602001516105819190611b0a565b94505b8d858151811061059657610596611a8d565b60200260200101519350836040015180156105b357508360800151155b15610663578160048111156105ca576105ca611af4565b845160048111156105dd576105dd611af4565b146105fc575060019d5060009b50610c809a5050505050505050505050565b60001960408901528751610611906001611b21565b8e868151811061062357610623611a8d565b6020026020010151606001818152505060018e868151811061064757610647611a8d565b6020908102919091010151901515608090910152506001610675565b8461066d81611b39565b955050610584565b80610694575060019d5060009b50610c809a5050505050505050505050565b84156106ec578d85815181106106ac576106ac611a8d565b60200260200101519350836040015180156106c957508360800151155b156106da57604088018590526106ec565b846106e481611b39565b955050610694565b8461072d578d858151811061070357610703611a8d565b602002602001015193508360400151801561072057508360800151155b1561072d57604088018590525b505050610c59565b601160f91b6001600160f81b0319821614156107e15760008061075b888f8e8c8e611334565b91509150881561076d57809950600098505b811561078a57509c5060009a50610c809950505050505050505050565b8561079481611ab9565b96505087604001516000191461072d578d8860400151815181106107ba576107ba611a8d565b602002602001015160a00180518091906107d390611ad4565b60ff16905250505050610c59565b600160fd1b6001600160f81b03198216148061080a5750601160f81b6001600160f81b03198216145b806108225750600960f91b6001600160f81b03198216145b8061083a5750600560fa1b6001600160f81b03198216145b156108455750610c59565b601d60f91b6001600160f81b031982161415610877576001866020015161086c9190611b0a565b604087015250610c59565b600b60fa1b6001600160f81b031982161415610a5f578560400151600019141580156108d6575060028c8760400151815181106108b6576108b6611a8d565b60200260200101516000015160048111156108d3576108d3611af4565b14155b8015610915575060018c8760400151815181106108f5576108f5611a8d565b602002602001015160000151600481111561091257610912611af4565b14155b15610a06576001866020015161092b9190611b0a565b92505b60028c848151811061094257610942611a8d565b602002602001015160000151600481111561095f5761095f611af4565b1480610999575060018c848151811061097a5761097a611a8d565b602002602001015160000151600481111561099757610997611af4565b145b156109f4578b83815181106109b0576109b0611a8d565b60200260200101516040015180156109e357508b83815181106109d5576109d5611a8d565b602002602001015160800151155b156109f45760408601839052610a06565b826109fe81611b39565b93505061092e565b856040015160001914158015610a4f575060028c876040015181518110610a2f57610a2f611a8d565b6020026020010151600001516004811115610a4c57610a4c611af4565b14155b15610a5957600196505b50610c59565b600360fc1b6001600160f81b0319821610801590610a8b5750603960f81b6001600160f81b0319821611155b80610aa35750602d60f81b6001600160f81b03198216145b80610abb5750603360f91b6001600160f81b03198216145b80610ad35750601d60fa1b6001600160f81b03198216145b80610aeb5750603760f91b6001600160f81b03198216145b15610c0e57856040015160001914610b8f578b866040015181518110610b1357610b13611a8d565b6020026020010151915060016004811115610b3057610b30611af4565b82516004811115610b4357610b43611af4565b1480610b725750600382516004811115610b5f57610b5f611af4565b148015610b72575060a082015160ff1615155b15610b8f575060019b5060009950610c8098505050505050505050565b610b9b868d8c8b61163c565b94508415610bb95750929a5060009850610c80975050505050505050565b83610bc381611ab9565b945050856040015160001914610a59578b866040015181518110610be957610be9611a8d565b602002602001015160a0018051809190610c0290611ad4565b60ff1690525050610c59565b600160fd1b6001600160f81b0319821610801590610c3a5750603f60f91b6001600160f81b0319821611155b15610c57575060019b5060009950610c8098505050505050505050565b505b845185610c6582611ab9565b905250610385565b5050505060200151600097509450505050505b9250925092565b6060836000610c968585611b0a565b67ffffffffffffffff811115610cae57610cae611b50565b6040519080825280601f01601f191660200182016040528015610cd8576020820181803683370190505b509050845b84811015610d4a57828181518110610cf757610cf7611a8d565b01602001516001600160f81b03191682610d118884611b0a565b81518110610d2157610d21611a8d565b60200101906001600160f81b031916908160001a90535080610d4281611ab9565b915050610cdd565b5095945050505050565b815181516000918491849190811115610d6b575080515b60005b81811015610e3f57828181518110610d8857610d88611a8d565b602001015160f81c60f81b6001600160f81b031916848281518110610daf57610daf611a8d565b01602001516001600160f81b0319161015610dd25760001994505050505061031a565b828181518110610de457610de4611a8d565b602001015160f81c60f81b6001600160f81b031916848281518110610e0b57610e0b611a8d565b01602001516001600160f81b0319161115610e2d57600194505050505061031a565b80610e3781611ab9565b915050610d6e565b50815183511015610e5757600019935050505061031a565b815183511115610e6d576001935050505061031a565b6000935050505061031a565b600082818080805b8451811015610fae5780158015610ebc5750848181518110610ea557610ea5611a8d565b6020910101516001600160f81b031916602d60f81b145b15610ec657600191505b6030858281518110610eda57610eda611a8d565b016020015160f81c10801590610f0a57506039858281518110610eff57610eff611a8d565b016020015160f81c11155b15610f74578215610f2d5786610f1f57610fae565b86610f2981611b39565b9750505b610f38600a85611b66565b93506030858281518110610f4e57610f4e611a8d565b0160200151610f60919060f81c611beb565b610f6d9060000b85611c2c565b9350610f9c565b848181518110610f8657610f86611a8d565b60209101015160f81c602e1415610f9c57600192505b80610fa681611ab9565b915050610e81565b508515610fcd57610fc086600a611d51565b610fca9084611b66565b92505b8015610fe257610fdf60001984611b66565b92505b509095945050505050565b61101160405180606001604052806000815260200160008152602001600081525090565b6060600060405180606001604052806000815260200160008152602001600019815250905060008467ffffffffffffffff81111561105157611051611b50565b60405190808252806020026020018201604052801561108a57816020015b611077611a40565b81526020019060019003908161106f5790505b5091959194509092505050565b60006110a1611a40565b82518460200151106110df57600083600185516110be9190611b0a565b815181106110ce576110ce611a8d565b60200260200101519150915061117b565b604080516101208101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c08301829052835180850190945260018452602f60f81b8482015260e083019390935261010082015290850151845182918691811061115457611154611a8d565b602002602001018190525084602001805180919061117190611ab9565b9052506001925090505b9250929050565b60608460400151600019141580156111cc57506002848660400151815181106111ad576111ad611a8d565b60200260200101516000015160048111156111ca576111ca611af4565b145b156112a657838560400151815181106111e7576111e7611a8d565b602002602001015160e001516112218587604001518151811061120c5761120c611a8d565b6020026020010151610100015160000b6117de565b604051602001611232929190611d9f565b60405160208183030381529060405290508385604001518151811061125957611259611a8d565b6020026020010151610100015160016112729190611dc8565b8486604001518151811061128857611288611a8d565b6020026020010151610100019060000b908160000b8152505061132c565b6000836112d257826040516020016112be9190611e0b565b6040516020818303038152906040526112e3565b604051806020016040528060008152505b9050848660400151815181106112fb576112fb611a8d565b602002602001015160e0015181604051602001611319929190611e21565b6040516020818303038152906040529150505b949350505050565b845160009060609082611345611a40565b89518a61135182611ab9565b9052505b87518a511015611619576000888b600001518151811061137757611377611a8d565b01602001516001600160f81b0319169050601160f91b8114156114165761139e8b8b611097565b9093509150826113c65750505087525050604080516020810190915260008152600390611632565b6113dc896113d5866001611b21565b8d51610c87565b945060006113ec8c8c8b8b611182565b90506114088360036113ff886001611b21565b8f518d86611850565b600096505050505050611632565b605c60f882901c148015611436575088518b51611434906001611b21565b105b15611603578a518b61144782611ab9565b9052508a5189518a9190811061145f5761145f611a8d565b6020910101516001600160f81b031916601160f91b14806114a85750888b600001518151811061149157611491611a8d565b6020910101516001600160f81b031916602f60f81b145b806114db5750888b60000151815181106114c4576114c4611a8d565b6020910101516001600160f81b031916601760fa1b145b8061150e5750888b60000151815181106114f7576114f7611a8d565b6020910101516001600160f81b031916603360f91b145b806115415750888b600001518151811061152a5761152a611a8d565b6020910101516001600160f81b031916603960f91b145b806115745750888b600001518151811061155d5761155d611a8d565b6020910101516001600160f81b031916603760f91b145b806115a75750888b600001518151811061159057611590611a8d565b6020910101516001600160f81b031916603160f91b145b806115da5750888b60000151815181106115c3576115c3611a8d565b6020910101516001600160f81b031916601d60fa1b145b156115e55750611605565b50505087525050604080516020810190915260008152600190611632565b505b89518a61161182611ab9565b905250611355565b5050875250506040805160208101909152600081526002905b9550959350505050565b83516000908190818061164d611a40565b87518a51101561176257878a600001518151811061166d5761166d611a8d565b01602001516001600160f81b0319169250600160fd1b83148061169d5750600960f81b6001600160f81b03198416145b806116b55750600560f91b6001600160f81b03198416145b806116cd5750600d60f81b6001600160f81b03198416145b806116e55750600b60fa1b6001600160f81b03198416145b806116fd5750607d60f81b6001600160f81b03198416145b806117155750605d60f81b6001600160f81b03198416145b156117235760019450611762565b602060f884901c108061173a5750607f60f884901c115b1561174e575050508652506001905061132c565b89518a61175a82611ab9565b90525061164d565b84611776575050508652506002905061132c565b6117808a8a611097565b909250905081611799575050508652506003905061132c565b60006117a88b8b60008b611182565b90506117be826004878e60000151600086611850565b8a518b6117ca82611b39565b90525060009b9a5050505050505050505050565b6060600082126117fd5760405180602001604052806000815250611818565b604051806040016040528060018152602001602d60f81b8152505b611829611824846118b4565b6118cb565b60405160200161183a929190611e21565b6040516020818303038152906040529050919050565b8585600481111561186357611863611af4565b9081600481111561187657611876611af4565b905250602086019390935260016040860181905260608601929092526080850191909152600060a0850152151560c084015260e09092019190915250565b6000808212156118c7578160000361031a565b5090565b606060006118d883611968565b600101905060008167ffffffffffffffff8111156118f8576118f8611b50565b6040519080825280601f01601f191660200182016040528015611922576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461195b57611960565b61192c565b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106119a75772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106119d3576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106119f157662386f26fc10000830492506010015b6305f5e1008310611a09576305f5e100830492506008015b6127108310611a1d57612710830492506004015b60648310611a2f576064830492506002015b600a831061031a5760010192915050565b60408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301526101009091015290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611acd57611acd611aa3565b5060010190565b600060ff821660ff811415611aeb57611aeb611aa3565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b600082821015611b1c57611b1c611aa3565b500390565b60008219821115611b3457611b34611aa3565b500190565b600081611b4857611b48611aa3565b506000190190565b634e487b7160e01b600052604160045260246000fd5b60006001600160ff1b0381841382841380821686840486111615611b8c57611b8c611aa3565b600160ff1b6000871282811687830589121615611bab57611bab611aa3565b60008712925087820587128484161615611bc757611bc7611aa3565b87850587128184161615611bdd57611bdd611aa3565b505050929093029392505050565b600081810b83820b8281128015607f19830184121615611c0d57611c0d611aa3565b81607f018313811615611c2257611c22611aa3565b5090039392505050565b600080821280156001600160ff1b0384900385131615611c4e57611c4e611aa3565b600160ff1b8390038412811615611c6757611c67611aa3565b50500190565b600181815b80851115611ca8578160001904821115611c8e57611c8e611aa3565b80851615611c9b57918102915b93841c9390800290611c72565b509250929050565b600082611cbf5750600161031a565b81611ccc5750600061031a565b8160018114611ce25760028114611cec57611d08565b600191505061031a565b60ff841115611cfd57611cfd611aa3565b50506001821b61031a565b5060208310610133831016604e8410600b8410161715611d2b575081810a61031a565b611d358383611c6d565b8060001904821115611d4957611d49611aa3565b029392505050565b6000611d5d8383611cb0565b9392505050565b6000815160005b81811015611d855760208185018101518683015201611d6b565b81811115611d94576000828601525b509290920192915050565b6000611dab8285611d64565b602f60f81b8152611dbf6001820185611d64565b95945050505050565b60008160000b8360000b6000821282607f03821381151615611dec57611dec611aa3565b82607f19038212811615611e0257611e02611aa3565b50019392505050565b602f60f81b81526000611d5d6001830184611d64565b600061132c611e308386611d64565b84611d6456fea2646970667358221220661ff81732f9cb22db8191b006081f2d0b82102cfdf2e7c02894839f59a0103f64736f6c634300080b0033";
	const JSON_GET_BOOL_HASH: &str = "41a6653e";


	#[test]
	pub fn test_json() {
		let byte_code = hex::decode(JSON_BYT_CODE).unwrap();
		let input_data = prepare_function_call_input(JSON_GET_BOOL_HASH, vec![]).unwrap();

		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		let decoded = decode(&vec![ParamType::Bool, ParamType::Bool], &return_data).unwrap();
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(true, decoded[1].clone().into_bool().unwrap());
	}


	#[test]
	pub fn test_get_i64() {
		let url = run(0).unwrap();
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::Int(2)];

		// given
		let input_data = prepare_function_call_input(
			GET_I64_FUNCTION_HASH_0,
			encode(&[
				Token::String(format!(
					"{}/2/users/by/username/twitterdev?user.fields=public_metrics",
					url
				)),
				Token::String("/data/public_metrics/followers_count".to_string()),
			]),
		)
		.unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(100), decoded[1].clone().into_int().unwrap());
	}

	#[test]
	pub fn test_get_i64_fail() {
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::Int(2)];

		// given
		let input_data = prepare_function_call_input(
			GET_I64_FUNCTION_HASH_0,
			encode(&[
				Token::String(
					"http://localhost:1/2/users/by/username/twitterdev?user.fields=public_metrics"
						.into(),
				),
				Token::String("/data/public_metrics/followers_count".to_string()),
			]),
		)
		.unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(false, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(0), decoded[1].clone().into_int().unwrap());
	}

	// we want to check here that execution is not interrupted by http error
	#[test]
	pub fn test_get_i64_returns_second_result_in_case_of_first_request_failure() {
		let url = run(0).unwrap();
		let byte_code = hex::decode(GET_I64_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::Int(2)];

		// given
		let input_data = prepare_function_call_input(
			GET_I64_FUNCTION_HASH_1,
			encode(&[
				// this one uses different port so service is unavailable
				Token::String(
					"http://localhost:1/2/users/by/username/twitterdev?user.fields=public_metrics"
						.to_string(),
				),
				Token::String("/data/public_metrics/followers_count".to_string()),
				Token::String(format!(
					"{}/2/users/by/username/twitterdev?user.fields=public_metrics",
					url
				)),
				Token::String("/data/public_metrics/followers_count".to_string()),
			]),
		)
		.unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(U256::from(100), decoded[1].clone().into_int().unwrap());
	}

	#[test]
	pub fn test_get_bool() {
		let url = run(0).unwrap();
		let byte_code = hex::decode(GET_BOOL_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::Bool];

		// given
		let input_data = prepare_function_call_input(GET_BOOL_FUNCTION_HASH_0, encode(&[
			Token::String(format!("{}/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d", url)),
			Token::String("/hasJoined".to_string())])).unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(true, decoded[1].clone().into_bool().unwrap());
	}

	#[test]
	pub fn test_get_bool_fail() {
		let byte_code = hex::decode(GET_BOOL_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::Bool];

		// given
		let input_data = prepare_function_call_input(GET_BOOL_FUNCTION_HASH_0, encode(&[
			Token::String("http://localhost:1/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d".into()),
			 Token::String("/hasJoined".to_string())])).unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(false, decoded[0].clone().into_bool().unwrap());
		assert_eq!(false, decoded[1].clone().into_bool().unwrap());
	}

	// we want to check here that execution is not interrupted by http error
	#[test]
	pub fn test_get_bool_returns_second_result_in_case_of_first_request_failure() {
		let url = run(0).unwrap();
		let byte_code = hex::decode(GET_BOOL_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::Bool];

		// given
		let input_data = prepare_function_call_input(
			GET_BOOL_FUNCTION_HASH_1,
				encode(
				&[
					// this one uses different port so service is unavailable
					Token::String("http://localhost:1/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d".to_string()),
					Token::String("/hasJoined".to_string()),
					Token::String(format!("{}/events/does-user-joined-evm-campaign?account=0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d", url)),
					Token::String("/hasJoined".to_string())
				]
			)
		).unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!(true, decoded[1].clone().into_bool().unwrap());
	}

	#[test]
	pub fn test_get_string() {
		let url = run(0).unwrap();
		let byte_code = hex::decode(GET_STRING_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::String];

		// given
		let input_data = prepare_function_call_input(
			GET_STRING_FUNCTION_HASH_0,
			encode(&[
				Token::String(format!(
					"{}/v1/blocks/e4068e6a326243468f35dcdc0c43f686/children",
					url
				)),
				Token::String("/object".to_string()),
			]),
		)
		.unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!("list", decoded[1].clone().into_string().unwrap());
	}

	#[test]
	pub fn test_get_string_fail() {
		let byte_code = hex::decode(GET_STRING_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::String];

		// given
		let input_data = prepare_function_call_input(
			GET_STRING_FUNCTION_HASH_0,
			encode(&[
				Token::String(
					"http://localhost:1/v1/blocks/e4068e6a326243468f35dcdc0c43f686/children".into(),
				),
				Token::String("/object".to_string()),
			]),
		)
		.unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(false, decoded[0].clone().into_bool().unwrap());
		assert_eq!("", decoded[1].clone().into_string().unwrap());
	}

	// we want to check here that execution is not interrupted by http error
	#[test]
	pub fn test_get_string_returns_second_result_in_case_of_first_request_failure() {
		let url = run(0).unwrap();
		let byte_code = hex::decode(GET_STRING_BYTE_CODE).unwrap();
		let return_types = vec![ParamType::Bool, ParamType::String];

		// given
		let input_data = prepare_function_call_input(
			GET_STRING_FUNCTION_HASH_1,
			encode(&[
				// this one uses different port so service is unavailable
				Token::String(
					"http://localhost:1/v1/blocks/e4068e6a326243468f35dcdc0c43f686/children".into(),
				),
				Token::String("/object".to_string()),
				Token::String(format!(
					"{}/v1/blocks/e4068e6a326243468f35dcdc0c43f686/children",
					url
				)),
				Token::String("/object".to_string()),
			]),
		)
		.unwrap();

		// when
		let (_, return_data) = execute_smart_contract(byte_code, input_data);

		// then
		let decoded = decode(&return_types, &return_data).unwrap();
		assert_eq!(true, decoded[0].clone().into_bool().unwrap());
		assert_eq!("list", decoded[1].clone().into_string().unwrap());
	}
}
