// Copyright 2020-2023 Litentry Technologies GmbH.
// This file is part of Litentry.
//
// Litentry is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Litentry is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Litentry.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity_management
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-16, STEPS: `25`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("litmus-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/litentry-collator
// benchmark
// pallet
// --chain=litmus-dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_identity_management
// --extrinsic=*
// --steps=25
// --repeat=20
// --header=./LICENSE_HEADER
// --template=./templates/benchmark/pallet-weight-template.hbs
// --output=./pallets/identity-management/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_identity_management.
pub trait WeightInfo {
	fn add_delegatee() -> Weight;
	fn remove_delegatee() -> Weight;
	fn create_identity() -> Weight;
	fn remove_identity() -> Weight;
	fn verify_identity() -> Weight;
	fn set_user_shielding_key() -> Weight;
	fn user_shielding_key_set() -> Weight;
	fn identity_created() -> Weight;
	fn identity_removed() -> Weight;
	fn identity_verified() -> Weight;
	fn some_error() -> Weight;
}

/// Weights for pallet_identity_management using the Litentry node and recommended hardware.
pub struct LitentryWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for LitentryWeight<T> {
	// Storage: IdentityManagement Delegatee (r:0 w:1)
	fn add_delegatee() -> Weight {
		Weight::from_ref_time(19_600_000 as u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: IdentityManagement Delegatee (r:1 w:1)
	fn remove_delegatee() -> Weight {
		Weight::from_ref_time(24_200_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn create_identity() -> Weight {
		Weight::from_ref_time(22_800_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn remove_identity() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn verify_identity() -> Weight {
		Weight::from_ref_time(21_200_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn set_user_shielding_key() -> Weight {
		Weight::from_ref_time(21_500_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn user_shielding_key_set() -> Weight {
		Weight::from_ref_time(17_500_000 as u64)
	}
	fn identity_created() -> Weight {
		Weight::from_ref_time(18_000_000 as u64)
	}
	fn identity_removed() -> Weight {
		Weight::from_ref_time(17_500_000 as u64)
	}
	fn identity_verified() -> Weight {
		Weight::from_ref_time(17_900_000 as u64)
	}
	fn some_error() -> Weight {
		Weight::from_ref_time(18_400_000 as u64)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: IdentityManagement Delegatee (r:0 w:1)
	fn add_delegatee() -> Weight {
		Weight::from_ref_time(19_600_000 as u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: IdentityManagement Delegatee (r:1 w:1)
	fn remove_delegatee() -> Weight {
		Weight::from_ref_time(24_200_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn create_identity() -> Weight {
		Weight::from_ref_time(22_800_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn remove_identity() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn verify_identity() -> Weight {
		Weight::from_ref_time(21_200_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: IMPExtrinsicWhitelist GroupControlOn (r:1 w:0)
	fn set_user_shielding_key() -> Weight {
		Weight::from_ref_time(21_500_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	fn user_shielding_key_set() -> Weight {
		Weight::from_ref_time(17_500_000 as u64)
	}
	fn identity_created() -> Weight {
		Weight::from_ref_time(18_000_000 as u64)
	}
	fn identity_removed() -> Weight {
		Weight::from_ref_time(17_500_000 as u64)
	}
	fn identity_verified() -> Weight {
		Weight::from_ref_time(17_900_000 as u64)
	}
	fn some_error() -> Weight {
		Weight::from_ref_time(18_400_000 as u64)
	}
}

